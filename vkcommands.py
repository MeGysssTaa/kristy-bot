import glob
import json
import os
import pyclbr
import random
import re
import traceback
from typing import Dict, List

import requests
from fuzzywuzzy import fuzz

import log_util
import ranks

ALL_MENTIONS = ['all', '–≤—Å–µ', 'online', '–æ–Ω–ª–∞–π–Ω', '–∑–¥–µ—Å—å', 'here', '—Ç—É—Ç', 'everyone']
ALL_MENTIONS_REGEX = r"(?:\s|^)[@*]({0})(?=[\s.,:;?()!]|$)".format("|".join(ALL_MENTIONS))
GROUP_PING_REGEX = r"(?:\s|^)[@*]([a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]+)(?=[\s .,:;?()!]|$)"
GROUP_DM_REGEX = r"(?:\s|^)[@*]([a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]+)\+(?=[\s .,:;?()!]|$)"

EMOTIONS = ["üéä", "üß®", "üéÜ", "üéâ", "ü•≥", "üéà", "üéÖ", "üéÑ"]
NEW_YEAR_TEXT = [
    ("1 —è–Ω–≤–∞—Ä—è ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ 365 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏. –ù–∞–ø–∏—à–∏ –µ—ë —Ö–æ—Ä–æ—à–æ!", "üí¨ –ö—Å—Ç–∞—Ç–∏, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏ –≥–æ–¥–∞! –í 2022 –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 70 000 —Å–æ–æ–±—â–µ–Ω–∏–π. –≠—Ç–æ –ø–æ—á—Ç–∏ 200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å!"),
    ("–ñ–µ–ª–∞—é —Ç–µ–±–µ –Ω–∞–¥–µ–∂–¥—ã, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ –≤–∫—É—Å–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫ –≤ —ç—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏!", "üìä –°–∞–º—ã–º–∏ –±–æ–ª—Ç–ª–∏–≤—ã–º–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å @id248019102 (–õ–µ–æ–Ω–∏–¥) (7630 —Å–æ–æ–±—â–µ–Ω–∏–π), @id168855520 (–ú–∞—à–∞) (6885 —Å–æ–æ–±—â–µ–Ω–∏–π) –∏ @id128305895 (–ö–∞—Ç—è) (5335 —Å–æ–æ–±—â–µ–Ω–∏–π). –¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ -- —Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–µ—Å–µ–¥—ã."),
    ("–ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –ª—É—á—à–∏–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–Ω –æ—Ç –≤—Å–µ–≥–æ —Å–µ—Ä–¥—Ü–∞. –ù–æ –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ç–æ–∂–µ –º–æ–≥—É—Ç —Ç–≤–æ—Ä–∏—Ç—å —á—É–¥–µ—Å–∞.", "üñ•Ô∏è –ê —Å–∞–º–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –æ—Å—Ç–∞–ª–∞—Å—å !—Ä—É–ª–µ—Ç–∫–∞. 3000 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (40% –æ—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥)! –ù–∞ –≤—Ç–æ—Ä–æ–º –º–µ—Å—Ç–µ -- !—Ç–∞–π–ª–µ—Ä (@id248019102 (—á–µ–ª)), –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º -- !anime (–≤—Å—ë –µ—â—ë –Ω–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö...)."),
    ("–ü–æ–º–Ω–∏, —á—Ç–æ –î–µ–¥ –ú–æ—Ä–æ–∑ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π. –ò –≤—Å—ë –≤–∏–¥–∏—Ç. –î–∞, –¥–∞–∂–µ —ç—Ç–æ! –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!", "üñºÔ∏è –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è ?–ø—Ä–æ—Å–Ω—É–ª—Å—è (398 —Ä–∞–∑), ?—Å—Å (213), ?–ª–∞–¥–Ω–æ (203), ?—Å (190) –∏ ?—Å–ø–∏–º (171). –î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞."),
    ("–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º: –ø—É—Å—Ç—å —Å—á–∞—Å—Ç—å–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–∏–º, –∞ —Å—á–µ—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –ø–ª–∞—Ç–∏—Ç—å, –º–∞–ª–µ–Ω—å–∫–∏–º–∏.", "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É '–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º, –ö—Ä–∏—Å—Ç–∏!'? –í —ç—Ç–æ–º –≥–æ–¥—É –≤—ã –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º 600 —Ä–∞–∑..."),
    ("–ù–æ–≤—ã–π –≥–æ–¥ ‚Äî —ç—Ç–æ –µ—â—ë –Ω–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞, –ø—É—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ —Å—Ç—É–ø–∏–ª–∏, –∫—Ä—ã–ª—å—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ —Ä–∞—Å–ø—Ä–∞–≤–∏–ª–∏. –≠—Ç–æ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ —Å–ª—É—á–∞–ª–∏—Å—å! –ü—Ä–µ–∂–¥–µ —á–µ–º —á–∞—Å—ã –ø—Ä–æ–±—å—é—Ç 12, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å!", "üê∫ –∞—É—Ñ"),
    ("–•–æ—á—É –æ–±—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ: –ü–ï–ß–ï–ù–¨–ö–ò!", "üéä –§–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –≤—Å–µ—Ö!!!"),
    ("–ù–æ–≤—ã–π –≥–æ–¥ –æ—Ç–º–µ–Ω–∏–ª–∏ –≤ —ç—Ç–æ–º –≥–æ–¥—É. –Ø —Å–ª—É—á–∞–π–Ω–æ —Å–∫–∞–∑–∞–ª–∞ –î–µ–¥—É –ú–æ—Ä–æ–∑—É, —á—Ç–æ —Ç—ã —Ö–æ—Ä–æ—à–æ –≤–µ–ª —Å–µ–±—è –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω —É–º–µ—Ä –æ—Ç —Å–º–µ—Ö–∞.", None),
    ("–ü–æ–º–Ω–∏: –≤–∞–∂–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ –ø–æ–¥ —ë–ª–∫–æ–π, –∞ –∫—Ç–æ –≤–æ–∫—Ä—É–≥ –Ω–µ—ë!", None),
    ("–ï—à—å, –ø–µ–π, –≤–µ—Å–µ–ª–∏—Å—å! –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞!", None),
    ("–Ø —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –î–µ–¥—É –ú–æ—Ä–æ–∑—É, —á—Ç–æ —Ç—ã —Ö–æ—Ä–æ—à–æ —Å–µ–±—è –≤–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –µ–º—É —Ç–≤–æ–π –≤–∏—à-–ª–∏—Å—Ç.", None),
    ("–ü—É—Å—Ç—å –≤—Å—ë –≤–∞–∂–Ω–æ–µ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Ä–∞–¥—É–µ—Ç –≤—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –≤–µ—Å—å –≥—Ä—è–¥—É—â–∏–π –≥–æ–¥!", None),
    ("–ü—å—ë–º –∑–∞ —Ç–µ—Ö, –∫—Ç–æ –∑–∞ —Å—Ç–æ–ª–æ–º, –∫—Ç–æ –ø–æ–¥ –Ω–∏–º –∏ –∫—Ç–æ –Ω–∞ –Ω—ë–º!", None),
    ("–í –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –Ω–æ—á—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è –∏–º–µ—é—Ç –æ—Å–æ–±—É—é —Å–∏–ª—É!", None),
    ("–ß—É–¥–µ—Å–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç, –∫–æ–≥–¥–∞ –∏—Ö –∂–¥—ë—à—å. –ü—É—Å—Ç—å –Ω–æ–≤—ã–π –≥–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π –∏ —Å–±—ã–≤—à–∏—Ö—Å—è –Ω–∞–¥–µ–∂–¥, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –≤–µ—Å—ë–ª—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π, –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!", None),
    ("–ù–æ–≤—ã–π –≥–æ–¥ ‚Äî –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏–π. –í—Å–µ–≥–¥–∞ –±—É–¥—å –ø–µ—Ä–≤—ã–º! –ü—É—Å—Ç—å –≤—Å–µ —Å–∞–º—ã–µ —Å–º–µ–ª—ã–µ –∏–¥–µ–∏ –∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –≤–æ–ø–ª–æ—Ç—è—Ç—Å—è –≤ –∂–∏–∑–Ω—å. –ú–µ—á—Ç–∞–π, –¥–µ—Ä–∑–∞–π, —Ç–≤–æ—Ä–∏: –µ—Å–ª–∏ –≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è –∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä—è–¥–æ–º, –º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–∏—Ç—å —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ –≤–µ—Ä—à–∏–Ω—ã. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—Ä–Ω—É—é —Ü–µ–ª—å.", None),
    ("–ñ–µ–ª–∞—é —Å—Ç–æ–ª—å–∫–æ —Å—á–∞—Å—Ç—å—è, —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–º–æ–∂–µ—à—å —É–¥–µ—Ä–∂–∞—Ç—å!", None),
    ("–ü—É—Å—Ç—å –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π –≥–æ–¥ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –≤–æ–ª—à–µ–±—Å—Ç–≤–æ–º, –º–µ—á—Ç–∞–º–∏ –∏ —Ö–æ—Ä–æ—à–∏–º –±–µ–∑—É–º–∏–µ–º!", None),
    ("–Ø –∂–µ–ª–∞—é, —á—Ç–æ–±—ã —Å–∞–ª–æ\n–°–æ —Å—Ç–æ–ª–∞ –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥\n–û—Ç –≥–æ—Å—Ç–µ–π –Ω–µ —É–±–µ–∂–∞–ª–æ\n–ó–∞ –¥–∏–≤–∞–Ω –∏–ª–∏ –∫–æ–º–æ–¥.", None),
    ("–ß—Ç–æ–± —à–∞–º–ø–∞–Ω—Å–∫–æ–µ —Å —É—Å–º–µ—à–∫–æ–π\n–ù–µ –∑–∞–ª–µ–∑–ª–æ –ø–æ–¥ –∫–æ–≤–µ—Ä.\n–ò —á—Ç–æ–± –≤–∞—à—É –æ–ª–∏–≤—å–µ—à–∫—É\n–ù–µ–ø—Ä–∏—è—Ç–µ–ª—å –Ω–µ —É–ø–µ—Ä.", None),
    ("–Ø –ø–æ–º–Ω—é —á—É–¥–Ω–æ–µ –ø–æ—Ö–º–µ–ª—å–µ!..\n–ö–∞–∫ —á—É—Ç—å –Ω–µ —É–º–µ—Ä –≥–æ–¥ –Ω–∞–∑–∞–¥.\n–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω—å–µ –Ω–µ –¥—É—ç–ª—å–µ‚Ä¶\n–ò –ª–µ–¥–µ–Ω—è—â–∏–π –¥—É—à—É –º–∞—Ç‚Ä¶", None),
    ("–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–ª—Å—è –ª–µ–≤—ã–π –≥–ª–∞–∑–∏–∫.\n–ü–æ—Ç–æ–º –∫–æ –º–Ω–µ —è–≤–∏–ª–∞—Å—å —Ç—ã\n–ò –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ä–∞—Å—Å–æ–ª –∏ —Ç–∞–∑–∏–∫,\n–ü—Ä–µ–¥—É–≥–∞–¥–∞–≤ –º–æ–∏ –º–µ—á—Ç—ã.", None),
    ("–ï—Å–ª–∏ –≤ –Ω–æ—á—å –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥,\n–°—Ç—Ä–∞–Ω–Ω—ã–π –≥–æ—Å—Ç—å –∫ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç-\n–ö—Ç–æ-—Ç–æ —Å –±–µ–ª–æ–π –±–æ—Ä–æ–¥–æ–π,\n–í –∫—Ä–∞—Å–Ω–æ–π —à–∞–ø–∫–µ –º–µ—Ö–æ–≤–æ–π,\n–° –¥–ª–∏–Ω–Ω—ã–º –ø–æ—Å–æ—Ö–æ–º –≤ —Ä—É–∫–µ\n–ò —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ –º–µ—à–∫–µ,\n–° –≥—Ä–æ–º–∫–∏–º —Å–º–µ—Ö–æ–º,\n–° –¥–æ–±—Ä—ã–º –≤–∑–≥–ª—è–¥–æ–º‚Ä¶\n–ó–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –ø–∏—Ç—å –Ω–µ –Ω–∞–¥–æ!", None),
    ("–ü–æ–º–Ω–∏: –ù–æ–≤—ã–π –≥–æ–¥ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å, —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!", None),
    ("–û–ø—Ç–∏–º–∏—Å—Ç –∂–¥—ë—Ç –ø–æ–ª—É–Ω–æ—á–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏—Ö–æ–¥ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞; –ø–µ—Å—Å–∏–º–∏—Å—Ç –∂–µ –∂–¥—ë—Ç –ø–æ–ª—É–Ω–æ—á–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –≥–æ–¥ —É–∂–µ –º–∏–Ω–æ–≤–∞–ª. –ê —á–µ–≥–æ –∂–¥—ë—à—å –æ—Ç –ø–æ–ª—É–Ω–æ—á–∏ —Ç—ã?", None),
    ("–ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º: –ø–∏—Å–∞—Ç—å, —Ä–∏—Å–æ–≤–∞—Ç—å, —Å—Ç—Ä–æ–∏—Ç—å, –ø–µ—Ç—å –∏–ª–∏ –∂–∏—Ç—å —Ç–∞–∫, –∫–∞–∫ —É–º–µ–µ—à—å —Ç–æ–ª—å–∫–æ —Ç—ã!", None),
    ("–ö–∞–Ω—É–Ω –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –º—ã —Å—Ç–∞–≤–∏–º —Ç–æ—á–∫—É, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞—á–∏–Ω–∞–µ–º –≤—Å—ë —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ü—É—Å—Ç—å –≤—Å—ë, —á—Ç–æ –≤—ã –∑–∞–≥–∞–¥–∞–µ—Ç–µ –≤ —ç—Ç—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –Ω–æ—á—å, —Å–±—É–¥–µ—Ç—Å—è. –ñ–µ–ª–∞—é –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∞—Ç—å –≤–µ—Ä–∏—Ç—å –≤ —á—É–¥–æ!", None),
    ("–ß—É–¥–µ—Å–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç, –∫–æ–≥–¥–∞ –∏—Ö –∂–¥—ë—à—å. –ü—É—Å—Ç—å –Ω–æ–≤—ã–π –≥–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π –∏ —Å–±—ã–≤—à–∏—Ö—Å—è –Ω–∞–¥–µ–∂–¥, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –≤–µ—Å—ë–ª—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π, –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", None),
    ("–ì–æ–≤–æ—Ä—è—Ç, –ø–æ–¥ –ù–æ–≤—ã–π –≥–æ–¥ ‚Äî\n–ß—Ç–æ –Ω–∏ –ø–æ–∂–µ–ª–∞–µ—Ç—Å—è,\n–í—Å—ë –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç,\n–í—Å—ë –≤—Å–µ–≥–¥–∞ —Å–±—ã–≤–∞–µ—Ç—Å—è.", None),
    ("–ñ–µ–ª–∞—é –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—É—á–∏—Ç; –º–µ—Å—Ç–æ, –≥–¥–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –∫—Ç–æ-—Ç–æ –≤–∞–∂–Ω—ã–π; –º–µ—á—Ç—É, —á—Ç–æ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è.", None),
    ("–ü—É—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞–ø–æ–ª–Ω—è—Ç—Å—è —Å–º–µ—Ö–æ–º, —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å–∏—è–Ω–∏–µ–º!", None),
    ("–ü—É—Å—Ç—å —ç—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–æ–ª–Ω—ã —á—É–¥–µ—Å–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Å–µ–ª—å—è!", None),
    ("–ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –ù–æ–≤—ã–π –≥–æ–¥ –±—ã–ª —Ä–∞–¥–æ—Å—Ç–Ω—ã–º –∏ —Å–≤–µ—Ç–ª—ã–º!", None),
    ("–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ–π–¥—É—Ç —Å–ø–æ–∫–æ–π–Ω–æ –∏ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!", None),
    ("–ü—É—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø—Ä–∏–Ω–µ—Å—É—Ç —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, —Ä–∞–¥–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç—å–µ!", None),
    ("–û—Ç –≤—Å–µ–≥–æ —Å–µ—Ä–¥—Ü–∞ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ù–æ–≤—ã–º –≥–æ–¥–æ–º!", None),
    ("–ü—É—Å—Ç—å —Ç–≤–æ–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è—Ç—Å—è!", None),
    ("–í —ç—Ç–æ–º –≥–æ–¥—É —Ç–µ–±–µ –º–Ω–æ–≥–æ–µ –ø—Ä–∏—à–ª–æ—Å—å –ø–µ—Ä–µ–∂–∏—Ç—å. –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—à–µ–ª –º–∏—Ä–Ω–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ.", None),
    ("–ü–æ—Å—ã–ª–∞—é —Ç–µ–±–µ —Å–∏–ª, –ª—é–±–≤–∏ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è!", None),
    ("–ü—É—Å—Ç—å –Ω–æ–≤—ã–π –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!", None),
    ("–ö—Ä–µ–ø–∫–æ –æ–±–Ω–∏–º–∞—é —Ç–µ–±—è: –ø–æ–∑–∞–±–æ—Ç—å—Å—è –≤ —ç—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –æ —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ.", None),
    ("–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤ —ç—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è.", None),
    ("–í—Å–µ –≥—É–ª—è—é—Ç –≤ –ù–æ–≤—ã–π –≥–æ–¥:\n–î—Ä—É–≥, —Å–æ—Å–µ–¥, —Å–æ—Å–µ–¥—Å–∫–∏–π –∫–æ—Ç.\n–ù–∞ —Å—Ç–æ–ª–µ —Å—Ç–æ–∏—Ç –∏–∫—Ä–∞,\n–ó–Ω–∞—á–∏—Ç –≤—Å–µ–º –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Ä–∞.", None),
    ("–ü—É—Å–∫–∞–π –Ω–æ–≤—ã–π –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω—ã–µ –≥–æ—Ä—ã —Å–∞–º—ã—Ö –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π, —â–µ–¥—Ä–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –±–µ—Å—á–∏—Å–ª–µ–Ω–Ω—ã–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤–µ—Å–µ–ª—ã—Ö —Å–æ–±—ã—Ç–∏–π, –∏ —Å—É–º–µ–µ—Ç –º–∞—Å—Ç–µ—Ä—Å–∫–∏ –∑–∞–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫ –≤–µ–ª–∏–∫–∏–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º!", None),
    (" –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤—Å–µ –¥–Ω–∏ –∂–∏—Ç—å –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏, –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, —á—Ç–æ–±—ã –ª–æ–≤–∫–æ, –±—ã—Å—Ç—Ä–æ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π!", None),
]

class VKCommandsManager:
    def __init__(self, kristy):
        self.logger = log_util.init_logging(__name__)
        self.kristy = kristy
        self.commands, self.chat_command_names = self._load_commands()

    def _load_commands(self):
        """
        –†–µ—Ñ–ª–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –í–ö –∏–∑ –º–æ–¥—É–ª—è 'vkcmds'.

        :return: –¥–≤–∞ —Å–ø–∏—Å–∫–∞ (list): (1) —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ <? extends VKCommand> –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥,
                                    (2) —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –î–õ–Ø –ë–ï–°–ï–î (–∫–æ–º–∞–Ω–¥—ã –õ–° –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã).
        """
        cmd_submodules = dict()
        # –ò—â–µ–º –≤—Å–µ –ø–æ–¥–º–æ–¥—É–ª–∏ –∏ –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤ –Ω–∏—Ö –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ —Å–∞–º–∏—Ö –ø–æ–¥–º–æ–¥—É–ª–µ–π.
        for root, dirs, files in os.walk("vkcmds", topdown=False):
            abs_search_path = os.path.join(os.path.dirname(__file__), root, '*.py')
            for path in glob.glob(abs_search_path):
                submodule_name = os.path.basename(path)[:-3]  # -3 –∏–∑-–∑–∞ '.py'
                all_classes = pyclbr.readmodule("{0}.{1}".format(root.replace(os.path.sep, '.'), submodule_name))
                # –ò—â–µ–º –≤ –ø–æ–¥–º–æ–¥—É–ª–µ –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π VKCommand.
                command_classes = {
                    name: info
                    for name, info in all_classes.items()
                    if 'VKCommand' in info.super
                }
                if command_classes:  # –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∞—Å—Å –Ω–∞–π–¥–µ–Ω
                    cmd_submodules[(root.replace(os.path.sep, '.'), submodule_name)] = command_classes

        commands = []  # —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        chat_command_names = []  # –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –î–õ–Ø –ë–ï–°–ï–î (–Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –õ–° –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã)

        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –ø–æ–¥–º–æ–¥—É–ª—è–º –∫–æ–º–∞–Ω–¥, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∫–æ–º–∞–Ω–¥ –≤ –Ω–∏—Ö (–¥–ª—è –∫–∞–∂–¥–æ–π
        # –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω –µ—ë —ç–∫–∑–µ–º–ø–ª—è—Ä) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
        for submodule, cmd_classes in cmd_submodules.items():
            submodule_root, submodule_name = submodule
            module = __import__(f'{submodule_root}.{submodule_name}')  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏
            for mod in submodule_root.split(".")[1:]:
                module = getattr(module, mod)  # –∏–¥—ë–º –¥–æ –ø–∞–ø–∫–∏
            submodule = getattr(module, submodule_name)  # –ø–æ–ª—É—á–∞–µ–º —Å–∞–º –ø–æ–¥–º–æ–¥—É–ª—å
            # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –∫–æ–º–∞–Ω–¥.
            for cmd_class_name in cmd_classes:
                # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
                class_instance = getattr(submodule, cmd_class_name)(self.kristy)
                cmd_label = class_instance.label
                dm = class_instance.dm
                commands.append(class_instance)  # –∫–æ—Ä–æ—á–µ —Ç—ã –ø–æ–ª—É—á–∞–ª –∫–ª–∞—Å—Å, –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ–±—ä–µ–∫—Ç!!!

                if not dm:
                    chat_command_names.append(cmd_label)

                self.logger.info('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –í–ö (%s): "%s"',
                                 '–¥–ª—è –õ–°' if dm else '–¥–ª—è –±–µ—Å–µ–¥', cmd_label)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥.
        return commands, chat_command_names

    @staticmethod
    def _is_annoying_topic(msg: str) -> bool:
        # noinspection PyBroadException
        try:
            msg_tf: str = VKCommandsManager._utransform("".join(msg.split()).lower())
            print(f'AnnoyingTopicDebug : "{msg}" ---------> "{msg_tf}"')

            annoying: List[str] = [
                '—É–∫—Ä–∞–∏–Ω',
                '—Ö–æ—Ö–æ–ª',
                '—Ö–æ—Ö',
                '–¥–æ–Ω–µ—Ü–∫',
                '–ª—É–≥–∞–Ω—Å–∫',
                '–¥–æ–Ω–±–∞—Å',
                '–¥–Ω—Ä',
                '–ª–Ω—Ä',
                '–ø—É—Ç–∏–Ω',
                '–¥–æ–ª–ª–∞—Ä',
                '–µ–≤—Ä–æ',
                '–±–∞–π–¥–µ–Ω',
                '–∑–µ–ª–µ–Ω—Å–∫'
            ]

            for item in annoying:
                if item in msg_tf:
                    print(' ')
                    print(f'ANNOYING')
                    print(f'  Topic: "{item}"')
                    print(f'  Original message: "{msg}"')
                    print(f'  Transformed message: "{msg_tf}')
                    print(' ')

                    return True

            return False
        except Exception:
            traceback.print_exc()
            return False

    @staticmethod
    def _utransform(msg: str) -> str:
        mappings: Dict[str, str] = {
            '—É':
                'yu—é√ù√Ω·ª≤·ª≥≈∂≈∑≈∏√ø·ª∏·ªπ·∫é·∫è·ª¥·ªµ·∫ô·ª∂·ª∑»≤»≥…é…è∆≥∆¥≈¨≈≠…Ñ â·µæ·ª§·ª•√ú√º«õ«ú«ó«ò«ô«ö«ï«ñ·π≤·π≥√ö√∫√ô√π√õ√ª·π∂·π∑«ì»ó≈∞≈±≈¨≈≠∆Ø∆∞·ªß≈™≈´≈™ÃÄ≈´ÃÄ≈™ÃÅ≈´·π∫·πª≈™ÃÉ≈´ÃÉ≈®≈©·π∏·ππ·π¥·πµ·∂ô≈≤≈≥≈≤ÃÅ≈≥ÃÅ≈≤ÃÉ≈≥ÃÉ»î»ï≈Æ≈Ø',
            '–∫':
                'k∆ò∆ôÍùÄÍùÅ·∏∞·∏±«®«©·∏≤·∏≥ƒ∂ƒ∑·∂Ñ‚±©‚±™·∏¥·∏µ',
            '—Ä':
                'qrp·πî·πï·πñ·πó‚±£·µΩ∆§∆•·µ±·∂à≈î≈ï…å…ç≈ò≈ô≈ñ≈ó·πò·πô»ê»ë»í»ì·πö·πõ·πú·πù·πû·πüÍû¶Íûß‚±§…ΩRÃÉrÃÉ',
            '–∞':
                '4a@√Ö√•«∫«ª·∏Ä·∏Å·∫öƒÇƒÉ·∫∂·∫∑·∫Æ·∫Ø·∫∞·∫±·∫≤·∫≥·∫¥·∫µ»Ç»É√Ç√¢·∫¨·∫≠·∫§·∫•·∫¶·∫ß·∫™·∫´·∫®·∫©·∫¢·∫£«ç«é»∫‚±•»¶»ß«†«°·∫†·∫°√Ñ√§«û«ü√Ä√†»Ä»Å√Å√°ƒÄƒÅƒÄÃÄƒÅÃÄ√É√£ƒÑƒÖƒÑÃÅƒÖÃÅƒÑÃÉƒÖÃÉAÃ≤aÃ≤·∂è',
            '–∏':
                'i–π–ô!·ªä·ªãƒ¨ƒ≠√é√Æ«è«ê∆ó…®√è√Ø·∏Æ·∏Ø√ç√≠√å√¨»à»âƒÆƒØƒÆÃÅƒÆÃÉƒ™ƒ´ƒ™ÃÄƒ´ÃÄ·∂ñ·ªà·ªâ»ä»ãƒ®ƒ©·∏¨·∏≠',
            '–Ω':
                '–ºmhnƒ§ƒ•»û»üƒ¶ƒß·∏®·∏©‚±ß‚±®·∫ñ·∫ñ·∏§·∏•·∏¢·∏£·∏¶·∏ß·∏™·∏´ÍûïÍú¶Íúß≈É≈Ñ√ë√±≈á≈à«∏«π·πÑ·πÖ·πÜ·πá≈Ö≈Ü·πà·πâ·πä·πãÍû§Íû•·µ∞·∂á·∏æ·∏ø·πÄ·πÅ·πÇ·πÉ ÃÉ ÃÉ·µØ',
            '–æ':
                'o0√ò√∏«æ«ø·∂±√ñ√∂»™»´√ì√≥√í√≤√î√¥·ªê·ªë·ªí·ªì·ªî·ªï·ªñ·ªó·ªò·ªô«ë«í≈ê≈ë≈é≈è»é»è»Æ»Ø»∞»±·ªå·ªç∆ü…µ∆†∆°·ªö·ªõ·ªú·ªù·ª†·ª°·ª¢·ª£·ªû·ªü·ªé·ªè≈å≈ç·πí·πì·πê·πë√ï√µ»¨»≠·πå·πç·πé·πè«™«´»å»çOÃ©oÃ©√ìÃ©√≥Ã©√íÃ©√≤Ã©«¨«≠OÕçoÕç',
            '—Ö':
                'x·∫å·∫ç·∫ä·∫ãXÃÇxÃÇ·∂çœáœáŒß',
            '–¥':
                'dƒêƒë∆ä…ó·∏ä·∏ã·∏å·∏ç·∏ê·∏ë·∏í·∏ìƒéƒè·∏é·∏è·µ≠·∂Å·∂ëŒîŒ¥‘Ä‚àÇ‘Å',
            '–±':
                '–≤b—å—ä8…ÉŒíŒ≤∆Ä·∏Ç·∏É·∏Ñ·∏Ö·∏Ü·∏á∆Å…ì·µ¨·∂Ä‚≤Ç‚≤É',
            '—Å':
                'cs$ƒÜƒáƒàƒâƒåƒçƒäƒã·∏à·∏â∆á∆àCÃàcÃà»ª»º√á√ßÍûîÍûíÍûì≈ö≈õ·π†·π°·∫õ·π®·π©·π§·π•·π¢·π£SÃ©sÃ©Íû®Íû©≈ú≈ù·π¶·πß≈†≈°≈û≈ü»ò»ôSÃàsÃà·∂ä‚±æ»ø·µ¥·∂≥',
            '–≥':
                'g«¥«µ«§«•ƒúƒù«¶«ßƒûƒüƒ¢ƒ£∆ì…†ƒ†ƒ°·∏†·∏°Íû†Íû°·∂ÉŒìŒ≥“ê“ë–É—ì',
            '–ª':
                'lƒπƒ∫≈Å≈ÇƒΩƒæ·∏∏·∏πLÃÉlÃÉƒªƒºƒø≈Ä·∏∂·∏∑·∏∫·∏ª·∏º·∏Ω»Ω∆ö‚±†‚±°ŒõŒª”Ö”Ü‘í‘ì‘Æ‘Ø≈Å≈Ç',
            '':
                '.,:;?#%^&*()-_=+`~[]{}<>/|\\"'
        }

        for letter, aliases in mappings.items():
            for i, alias in enumerate(aliases):
                msg = msg.replace(alias, letter)

                if i < (len(aliases) - 1):
                    msg = msg.replace(alias + aliases[i + 1], letter)

        return msg

    def _check_new_year(self, chat, peer, sender):
        try:
            if not self.kristy.db.check_new_year(chat, sender):
                members_count = len(self.kristy.db.get_members_new_year(chat))
                self.kristy.db.set_new_year(chat, sender)

                person = self.kristy.vk.users.get(user_ids=[sender])[0]
                name = person['first_name']
                if members_count < len(NEW_YEAR_TEXT):
                    text_new_year = NEW_YEAR_TEXT[members_count]

                    congratulation, fact = text_new_year
                else:
                    congratulation, fact = "", None

                print(congratulation, fact)
                text = f'{random.choice(EMOTIONS)} –° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º, *id{sender} ({name})! {congratulation}'
                self.kristy.send(peer, text)

                if fact is not None:
                    self.kristy.send(peer, fact)
        except Exception:
            self.kristy.send(peer, traceback.format_exc())

    def handle_chat_cmd(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –±–µ—Å–µ–¥–µ.
        """
        chat = event.chat_id
        peer = event.object.message['peer_id']
        sender = event.object.message['from_id']
        msg = event.object.message['text'].strip()
        attachments = event.object.message['attachments']
        fwd_messages = event.object.message['fwd_messages']
        if sender not in self.kristy.db.get_users(chat) and sender > 0:
            self.kristy.db.add_user_to_chat(chat, sender)

        if attachments and attachments[0]['type'] == 'audio_message':
            self.kristy.db.voice(chat, sender, attachments[0]['audio_message']['duration'])

        if VKCommandsManager._is_annoying_topic(msg):
            # noinspection PyBroadException
            try:
                # !–∫–æ—Ç–∏–∫
                cat_image = requests.get('https://cataas.com/cat?type=original').content
                with open('../tmp/cat{0}.png'.format(chat), 'wb') as handler:
                    handler.write(cat_image)
                uploads = self.kristy.vk_upload.photo_messages(photos="../tmp/cat{0}.png".format(chat))[0]
                os.remove("../tmp/cat{0}.png".format(chat))
                quote_image = 'photo{0}_{1}'.format(uploads["owner_id"], uploads["id"])
                self.kristy.send(peer, "–ú–æ–∂–µ—Ç, –ª—É—á—à–µ –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤?", quote_image)
            except Exception:
                self.kristy.send(peer, "üëéüèª")
                traceback.print_exc()

            return

        #self._check_new_year(chat, peer, sender)
        self.kristy.game_manager.check_minigame(chat, peer, sender, msg)
        # noinspection PyBroadException
        if len(msg) > 1 and msg.startswith('!'):
            # –ö–æ–º–∞–Ω–¥—ã
            spl = msg[1:].split(' ')
            label = spl[0].lower()
            args = spl[1:] if len(spl) > 1 else []
            target_cmd = None

            for command in self.commands:
                if not command.dm and command.label == label:
                    target_cmd = command
                    break
            if target_cmd:
                # TODO (—Å–æ–≤—Å–µ–º –ø–æ—Ç–æ–º) –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
                target_cmd.process(chat, peer, sender, args, attachments, fwd_messages)
            else:
                self._did_you_mean(chat, peer, label)

        elif len(msg) > 1 and msg.startswith('?'):
            # –í–ª–æ–∂–µ–Ω–∏—è
            tag = msg[1:].split(' ')[0].lower()
            tags_list = self.kristy.db.get_tag_attachments(chat)

            if tag in tags_list:
                self._handle_attachment(chat, peer, tag)
            else:
                self._did_you_mean(chat, peer, tag)

        else:
            group_ping = re.findall(GROUP_PING_REGEX, msg.lower())
            group_dm = re.findall(GROUP_DM_REGEX, msg.lower())
            all_ping = re.findall(ALL_MENTIONS_REGEX, msg.lower())

            if group_ping:
                self._handle_group_ping(chat, peer, group_ping, sender)
            if group_dm:
                self._handle_group_dm(chat, peer, sender, group_dm, msg, attachments)
            if all_ping:
                self.kristy.db.handle_all_abuse(chat, sender)

    def handle_user_kb_cmd(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –õ–° –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∏).
        """
        payload = json.loads(event.object.message['payload'])
        sender = event.object.message['from_id']
        peer = event.object.message['peer_id']
        if 'action' not in payload or 'chat_id' not in payload:
            print(2)
            return
        chat = payload['chat_id']
        label = payload['action']

        if chat == -1 and label != '–≤—ã–±–æ—Ä_–±–µ—Å–µ–¥—ã' and label != '—Å—Ç–∞—Ä—Ç–æ–≤–∞—è_–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞':
            self.kristy.send(peer, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ !–∫–ª–∞–≤–∞')
        elif chat != -1 and sender not in self.kristy.db.get_users(chat):
            self.kristy.send(peer, '–í–∞—Å –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ (–≤–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫–ª–∞–≤–∞)')
        else:
            target_cmd = None
            args = payload['args'] if 'args' in payload else {}
            for command in self.commands:
                if command.dm and command.label == label:
                    target_cmd = command
                    break

            if target_cmd is not None:
                # TODO (—Å–æ–≤—Å–µ–º –ø–æ—Ç–æ–º) –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ - —á–µ—Ä–µ–∑ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
                target_cmd.process(chat, peer, sender, args, None, None)

    def handle_user_text_cmd(self, event):
        peer = event.object.message['peer_id']
        sender = event.object.message['from_id']
        msg = event.object.message['text'].strip()
        target_cmd = None
        if msg.startswith('!–∫–ª–∞–≤–∞'):
            label = '–≤—ã–±–æ—Ä_–±–µ—Å–µ–¥—ã'
            for command in self.commands:
                if command.dm and command.label == label:
                    target_cmd = command
                    break
            if target_cmd:
                target_cmd.process(-1, peer, sender, {"page_list": [0]}, None, None)
        else:
            self.kristy.send(peer, '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !–∫–ª–∞–≤–∞')

    def _handle_attachment(self, chat, peer, tag):
        attachment = self.kristy.db.get_attachment(chat, tag)

        if attachment:
            self.kristy.send(peer, attachment["message"], attachment["attachments"])

    def _handle_group_ping(self, chat, peer, groups, sender):
        pings_str = self.kristy.db.pings_str(chat, groups, sender)

        if pings_str:
            user_vk = self.kristy.vk.users.get(user_id=sender)
            self.kristy.send(peer,
                             user_vk[0]['first_name'] + ' ' + user_vk[0][
                                 'last_name'] + ':\n‚òù‚òù‚òù‚òù‚òù‚òù‚òù‚òù‚òù‚òù \n' + pings_str + '\n‚òù‚òù‚òù‚òù‚òù‚òù‚òù‚òù‚òù‚òù \n')

    def _handle_group_dm(self, chat, peer, sender, groups, message, attachments):
        sending_list = []
        sending_groups = []
        for group in groups:
            users = self.kristy.db.get_group_members(chat, group)
            if users:
                sending_groups.append(group)
                for user in users:
                    if user not in sending_list:  # –¥–æ–±–∞–≤–∏–ª, —á—Ç–æ —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
                        sending_list.append(user)
        if sending_list:
            user_vk = self.kristy.vk.users.get(user_id=sender, name_case='ins')
            message = re.sub(GROUP_DM_REGEX, '', message).strip()
            chat_name = self.kristy.db.get_chat_name(chat)
            response = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" + " {0} {1} ".format(user_vk[0]["first_name"], user_vk[0][
                "last_name"]) + '–∏–∑ (' + chat_name + ') –¥–ª—è ({0}): \n'.format(', '.join(sending_groups)) + message
            error_send = []
            list_attachments = self.kristy.get_list_attachments(attachments, peer)
            for user in sending_list:
                # noinspection PyBroadException
                try:
                    self.kristy.send(user, response, list_attachments)
                except Exception:
                    error_send.append(user)

            if error_send:
                response = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏–º –ª—é–¥—è–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ –º–Ω–æ–π –¥–∞–∂–µ –Ω–µ –æ–±—â–∞–ª–∏—Å—å(((: \n'
                users_vk = self.kristy.vk.users.get(user_ids=error_send)
                for number, user_vk in enumerate(users_vk):
                    response += str(number + 1) + '. {0} {1}'.format(user_vk["first_name"],
                                                                     user_vk["last_name"]) + '\n'
                self.kristy.send(peer, response)
            else:
                response = '–£—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫—É'
                self.kristy.send(peer, response)

    def _did_you_mean(self, chat, peer, user_typed_name):
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫—É –≤–æ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å "!–≤—Ä—Å–∏—è", –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "!–≤–µ—Ä—Å–∏—è".
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–∞—Ö.

        :param chat: ID –±–µ—Å–µ–¥—ã.
        :param peer: ID –±–µ—Å–µ–¥—ã + 2E9.
        :param user_typed_name: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å –æ–ø–µ—á–∞—Ç–∫–æ–π), –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        """
        tags_list = self.kristy.db.get_tag_attachments(chat)
        response = ""
        for command in self.chat_command_names:
            if fuzz.ratio(user_typed_name, command) < 70:
                continue

            response += '!' + command + ' \n'
        for tag in tags_list:
            if fuzz.ratio(user_typed_name, tag) < 70:
                continue
            response += '?' + tag + ' \n'
        if response:
            self.kristy.send(peer, "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: \n" + response)


class VKCommand:
    def __init__(self, kristy, label, desc,
                 min_rank=ranks.Rank.WORKER, usage=None, min_args=0, dm=False, process_attachments=False):
        self.kristy = kristy
        self.label = label
        self.usage = usage
        self.desc = desc
        self.min_args = min_args
        self.dm = dm
        self.min_rank = min_rank
        self.process_attachments = process_attachments

    def print_usage(self, peer):
        if self.usage is not None:
            self.kristy.send(peer, '‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: \n' + self.usage)

    def print_no_perm(self, peer):
        self.kristy.send(peer, '‚õî –ù–µ—Ç –ø—Ä–∞–≤ ‚õî')

    def process(self, chat, peer, sender, args, attachments=None, fwd_messages=None):
        # noinspection PyBroadException
        if attachments is None:
            attachments = []
        if fwd_messages is None:
            fwd_messages = []
        try:
            if chat != -1 and self.kristy.db.get_user_rank_val(chat, sender) < self.min_rank.value:
                self.print_no_perm(peer)
            elif len(args) + len(attachments) + len(fwd_messages) < self.min_args:
                self.print_usage(peer)
            else:
                self.execute(chat, peer, sender, args, attachments, fwd_messages)
        except Exception:
            self.kristy.send(peer, traceback.format_exc(), ["photo-199300529_457239560"])
            traceback.print_exc()

    def execute(self, chat, peer, sender, args=None, attachments=None, fwd_messages=None):
        pass  # –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è
