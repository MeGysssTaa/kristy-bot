import re
from enum import Enum, auto
import groupsmgr
import timetable
import vk_api
import os
import time
import requests
from kristybot import GetVkSession
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

vk_session = GetVkSession()
vk_upload = vk_api.upload.VkUpload(vk_session)
vk = vk_session.get_api()

# –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —ç—Ç–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.
FORBIDDEN_NAMES = ['all', '–≤—Å–µ', 'online', '–æ–Ω–ª–∞–π–Ω', '–∑–¥–µ—Å—å', 'here', '—Ç—É—Ç']
MAX_MSG_LEN = 4096


class Rank(Enum):
    """
    –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤:
    GOVNO     - –ù–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –º–Ω–µ –∂–∞–ª–∫–æ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—É–¥–µ—Ç
    WORKER    - –ú–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø, —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã, —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                –≥—Ä—É–ø–ø—ã, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –≤–ª–æ–∂–µ–Ω–∏–π –±–æ—Ç–∞, –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã,
                –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—Å—ë —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ
    USER      - –ú–æ–∂–µ—Ç —Ç–µ–≥–∞—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º, –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—á—Ç—É –±–µ—Å–µ–¥—ã
    PRO       - –ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ, –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
                –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª—é–¥–µ–π –∏–ª–∏ –∏–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É
    MODERATOR - –ú–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç –≥—Ä—É–ø–ø, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è—Ç—å –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã,
                –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–∞–Ω–≥–∏ –¥—Ä—É–≥–∏—Ö
    ADMIN     - –ü–æ —Å—É—Ç–∏ —ç—Ç–æ –∫–∞–∫ –∫–æ—Ä–æ–ª—å, —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å 1, –∞–¥–º–∏–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
    KING      - –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–ª–∞—Å—Ç—å –Ω–∞–¥ —á–∞—Ç–æ–º
    """
    GOVNO = auto()
    WORKER = auto()
    USER = auto()
    PRO = auto()
    MODERATOR = auto()
    ADMIN = auto()
    KING = auto()


def send(peer, msg, attachment=None, keyboard=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç
    –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é (MAX_MSG_LEN), —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ,
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —á–∞—Å—Ç—è–º–∏.

    :param peer: –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (peer_id).
    :param msg: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param attachment: –í–ª–æ–∂–µ–Ω–∏—è
    :param keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    TODO: —Å–¥–µ–ª–∞—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –±–æ–ª–µ–µ "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º" - —Å—Ç–∞—Ä–∞—Ç—å—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º.
    """
    if len(msg) <= MAX_MSG_LEN:
        vk.messages.send(peer_id=peer, message=msg,
                         attachment=attachment, random_id=int(vk_api.utils.get_random_id()),
                         keyboard=keyboard)
    else:
        chunks = (msg[k:k + MAX_MSG_LEN] for k in range(0, len(msg), MAX_MSG_LEN))

        for chunk in chunks:
            vk.messages.send(peer_id=peer, message=chunk, random_id=int(vk_api.utils.get_random_id()))


def get_list_attachments(attachments, peer):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç attachments –í–ö–∞—à–Ω—ã–π –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ send
    """
    array_attachments = []
    for attachment in list(attachments):
        print(attachment)
        if attachment['type'] == 'photo':
            max_photo_url = ""
            max_width = 0
            for photo in attachment['photo']['sizes']:
                if max_width < photo['width']:
                    max_width = photo['width']
                    max_photo_url = photo['url']
            img_data = requests.get(max_photo_url).content
            time_now = time.time()
            with open(os.path.dirname(__file__) + os.path.sep + 'image{0}.jpg'.format(time_now), 'wb') as handler:
                handler.write(img_data)
            uploads = vk_upload.photo_messages(photos=os.path.dirname(__file__) + os.path.sep + 'image{0}.jpg'.format(time_now))[0]
            os.remove(os.path.dirname(__file__) + os.path.sep + 'image{0}.jpg'.format(time_now))
            array_attachments.append('photo{0}_{1}'.format(uploads["owner_id"], uploads["id"]))
        elif attachment['type'] == 'video':
            array_attachments.append('video{0}_{1}_{2}'.format(attachment['video']['owner_id'], attachment['video']['id'], attachment['video']['access_key']))
        elif attachment['type'] == 'audio':
            array_attachments.append('audio{0}_{1}'.format(attachment['audio']['owner_id'], attachment['audio']["id"]))
        elif attachment['type'] == 'wall':
            if not attachment['wall']['from']['is_closed']:
                array_attachments.append('wall{0}_{1}'.format(attachment['wall']['to_id'], attachment['wall']['id']))
        elif attachment['type'] == 'doc':
            file_name = attachment['doc']['title']
            url_doc = attachment['doc']['url']
            doc_data = requests.get(url_doc).content
            with open(os.path.dirname(__file__) + os.path.sep + file_name, 'wb') as handler:  # TODO –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –ø–æ—á—Ç–∏–Ω–∏—Ç—å –≤ –±—É–¥—É—â–µ–º
                handler.write(doc_data)
            upload = vk_upload.document_message(doc=os.path.dirname(__file__) + os.path.sep + file_name, peer_id=peer, title=file_name)
            os.remove(os.path.dirname(__file__) + os.path.sep + file_name)
            array_attachments.append('doc{0}_{1}'.format(upload['doc']["owner_id"], upload['doc']["id"]))
    return array_attachments


def start_keyboard(chat):
    keyboard = VkKeyboard()
    keyboard.add_button("–ü–æ—á—Ç–∞",
                        payload={"action": "–ø–æ—á—Ç–∞_–≤—ã–±–æ—Ä_—Ç–µ–≥", "chat_id": chat, "args": [0]},
                        color=VkKeyboardColor.PRIMARY
                        )
    keyboard.add_line()
    keyboard.add_button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                        payload={"action": "–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è_–≤—ã–±–æ—Ä", "chat_id": chat, "args": []},
                        color=VkKeyboardColor.POSITIVE
                        )
    keyboard.add_button("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è",
                        payload={"action": "–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è_–≤—ã–±–æ—Ä", "chat_id": chat, "args": []},
                        color=VkKeyboardColor.NEGATIVE
                        )
    keyboard.add_line()
    keyboard.add_button("–í—Å–µ –≥—Ä—É–ø–ø—ã",
                        payload={"action": "–≤—Å–µ_–≥—Ä—É–ø–ø—ã", "chat_id": chat}
                        )
    keyboard.add_button("–ú–æ–∏ –≥—Ä—É–ø–ø—ã",
                        payload={"action": "–º–æ–∏_–≥—Ä—É–ø–ø—ã", "chat_id": chat}
                        )
    keyboard.add_button("–°–æ—Å—Ç–∞–≤",
                        payload={"action": "—Å–æ—Å—Ç–∞–≤_–≥—Ä—É–ø–ø—ã_–≤—ã–±–æ—Ä", "chat_id": chat, "args": [0]}
                        )
    keyboard.add_line()
    keyboard.add_button("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ",
                        payload={"action": "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", "chat_id": chat}
                        )
    keyboard.add_button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                        payload={"action": "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏_–≤—ã–±–æ—Ä", "chat_id": chat}
                        )
    return keyboard.get_keyboard()


def exec_next_class(cmd, chat, peer, sender):
    """
    !–ø–∞—Ä–∞
    """
    sender_groups = groupsmgr.get_user_groups(chat, sender)
    next_class = timetable.next_class(chat, sender_groups)

    if next_class is None:
        send(peer, 'üö´ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë. –ò–¥–∏ –ø–æ—Å–ø–∏, —á—Ç–æ –ª–∏.')
    else:
        class_data = next_class[0]
        time_left = timetable.time_left(next_class[1])
        time_left_str = '–î–æ –Ω–∞—á–∞–ª–∞ ' + time_left + '.' if time_left is not None else '–ó–∞–Ω—è—Ç–∏–µ –≤–æ—Ç-–≤–æ—Ç –Ω–∞—á–Ω—ë—Ç—Å—è!'
        send(peer, 'üìö –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: %s. %s' % (class_data, time_left_str))


def exec_create(cmd, chat, peer, sender, args):
    """
    !—Å–æ–∑–¥–∞—Ç—å
    """
    existing = groupsmgr.get_all_groups(chat)

    created = []
    bad_names = []
    already_existed = []

    for group in args:
        if 2 <= len(group) <= 30 and re.match(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]', group) and group not in FORBIDDEN_NAMES:
            if group not in existing:
                groupsmgr.create_group(chat, group, sender)
                created.append(group)
            else:
                already_existed.append(group)
        else:
            bad_names.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if created:
        response += '–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚ûï '
        response += ' \n‚ûï '.join(created)
        response += ' \n'

    if already_existed:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: \n‚úî '
        response += ' \n‚úî '.join(already_existed)
        response += ' \n'

    if bad_names:
        response += '–ù–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∏—Ö –≥—Ä—É–ø–ø –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã: \nüö´ '
        response += ' \nüö´ '.join(bad_names)
        response += ' \n'

    send(peer, response)


def exec_delete(cmd, chat, peer, sender, args):
    """
    !—É–¥–∞–ª–∏—Ç—å
    """
    deleted = []
    not_found = []
    not_creator = []

    rank_user = groupsmgr.get_rank_user(chat, sender)
    existing = groupsmgr.get_all_groups(chat)
    sender_created_groups = groupsmgr.get_groups_created_user(chat, sender)

    for group in args:
        if group in existing:
            if group in sender_created_groups or Rank[rank_user].value >= Rank.MODERATOR.value:
                deleted.append(group)
                groupsmgr.delete_group(chat, group)
            else:
                not_creator.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if deleted:
        response += '–Ø —É–¥–∞–ª–∏–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚úñ '
        response += ' \n‚úñ '.join(deleted)
        response += ' \n'

    if not_found:
        response += '–≠—Ç–∏—Ö –≥—Ä—É–ø–ø –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ: \n‚õî '
        response += ' \n‚õî '.join(not_found)
        response += ' \n'

    if not_creator:
        response += '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \nüö´ '
        response += ' \nüö´ '.join(not_creator)
        response += ' \n'

    send(peer, response)


def exec_join(cmd, chat, peer, sender, args):
    """
    !–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    """
    joined = []
    already_joined = []  # –ø–µ—Ä–µ–∏–º–µ–Ω–Ω–æ–≤–∞—Ç—å
    not_found = []

    sender_groups = groupsmgr.get_user_groups(chat, sender)
    existing = groupsmgr.get_all_groups(chat)

    for group in args:
        if group in existing:
            if group not in sender_groups:
                joined.append(group)
                groupsmgr.join_group(chat, group, sender)
            else:
                already_joined.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if joined:
        response += '–î–æ–±–∞–≤–∏–ª–∞ –≤–∞—Å –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚ûï '
        response += ' \n‚ûï '.join(joined)
        response += ' \n'

    if already_joined:
        response += '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö: \n‚úî '
        response += ' \n‚úî '.join(already_joined)
        response += ' \n'

    if not_found:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —è –Ω–µ –Ω–∞—à–ª–∞: \nüö´ '
        response += ' \nüö´ '.join(not_found)
        response += ' \n'

    send(peer, response)


def exec_left(cmd, chat, peer, sender, args):
    """
    !–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è
    """
    left = []
    already_left = []
    not_found = []

    sender_groups = groupsmgr.get_user_groups(chat, sender)
    existing = groupsmgr.get_all_groups(chat)

    for group in args:
        if group in existing:
            if group in sender_groups:
                left.append(group)
                groupsmgr.left_group(chat, group, sender)
            else:
                already_left.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if left:
        response += '–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∞ –≤–∞—Å –æ—Ç –≥—Ä—É–ø–ø: \n‚úñ '
        response += ' \n‚úñ '.join(left)
        response += ' \n'

    if already_left:
        response += '–í–∞—Å –∏ –Ω–µ –±—ã–ª–æ –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö: \n‚õî '
        response += ' \n‚õî '.join(already_left)
        response += ' \n'

    if not_found:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —è –Ω–µ –Ω–∞—à–ª–∞: \nüö´ '
        response += ' \nüö´ '.join(not_found)
        response += ' \n'

    send(peer, response)


def exec_join_members(cmd, chat, peer, sender, args):
    """
    !–ø–æ–¥–∫–ª—é—á–∏—Ç—å
    """
    if '>' not in args or args.count('>') > 1:
        cmd.print_usage(peer)
        return
    users = re.findall(r'\[id+(\d+)\|\W*\w+\]', ' '.join(args[:args.index('>')]))
    groups = list(filter(re.compile(
        r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]').match,
                         args[args.index('>') + 1:] if len(args) - 1 > args.index('>') else []))
    if not users or not groups:
        cmd.print_usage(peer)
        return

    users = [int(user) for user in users]
    existing_groups = groupsmgr.get_all_groups(chat)
    existing_users = groupsmgr.get_all_users(chat)

    not_found = []
    joined = {}
    for user in users:
        if user in existing_users:
            joined.update({user: []})
            sender_groups = groupsmgr.get_user_groups(chat, user)
            for group in groups:
                if group in existing_groups and group not in sender_groups:
                    groupsmgr.join_group(chat, group, user)
                    joined[user].append(group)
            if not joined[user]:
                del joined[user]
        else:
            not_found.append(user)

    all_users_vk = vk.users.get(user_ids=users)
    first_names_joined = ""
    first_names_not_found = ""
    for user_vk in all_users_vk:  # —Ö—Ä–µ–Ω –µ–≥–æ –∑–Ω–∞–µ—Ç, –º–± –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º
        if user_vk["id"] in joined:
            first_names_joined += "{0} > {1} \n".format("{0} {1}".format(user_vk["first_name"], user_vk["last_name"]),
                                                        ' '.join(joined[user_vk["id"]]))
        if user_vk["id"] in not_found:
            first_names_not_found += "{0} {1} \n".format(user_vk["first_name"], user_vk["last_name"])

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if first_names_joined:
        response += '–î–æ–±–∞–≤–∏–ª–∞: \n'
        response += first_names_joined

    if first_names_not_found:
        response += '–î–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \n'
        response += first_names_not_found

    if not first_names_not_found and not first_names_joined:
        response += '–ù–∏–∫—Ç–æ –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'

    send(peer, response)


def exec_left_members(cmd, chat, peer, sender, args):
    """
    !–æ—Ç–∫–ª—é—á–∏—Ç—å
    """
    if '>' not in args or args.count('>') > 1:
        cmd.print_usage(peer)
        return
    users = re.findall(r"\[id+(\d+)\|\W*\w+\]", ' '.join(args[:args.index('>')]))
    groups = list(filter(re.compile(
        r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]').match,
                         args[args.index('>') + 1:] if len(args) - 1 > args.index('>') else []))
    if not users or not groups:
        cmd.print_usage(peer)
        return

    users = [int(user) for user in users]
    existing_groups = groupsmgr.get_all_groups(chat)
    existing_users = groupsmgr.get_all_users(chat)

    not_found = []
    left = {}
    for user in users:
        if user in existing_users:
            left.update({user: []})
            sender_groups = groupsmgr.get_user_groups(chat, user)
            for group in groups:
                if group in existing_groups and group in sender_groups:
                    groupsmgr.left_group(chat, group, user)
                    left[user].append(group)
            if not left[user]:
                del left[user]
        else:
            not_found.append(user)

    all_users_vk = vk.users.get(user_ids=users)
    first_names_left = ""
    first_names_not_found = ""
    for user_vk in all_users_vk:  # —Ö—Ä–µ–Ω –µ–≥–æ –∑–Ω–∞–µ—Ç, –º–± –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º
        if user_vk["id"] in left:
            first_names_left += "{0} > {1} \n".format("{0} {1}".format(user_vk["first_name"], user_vk["last_name"]),
                                                      ' '.join(left[user_vk["id"]]))
        if user_vk["id"] in not_found:
            first_names_not_found += "{0} {1} \n".format(user_vk["first_name"], user_vk["last_name"])

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if first_names_left:
        response += '–û—Ç–∫–ª—é—á–∏–ª–∞: \n'
        response += first_names_left

    if first_names_not_found:
        response += '–î–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \n'
        response += first_names_not_found

    if not first_names_not_found and not first_names_left:
        response += '–ù–∏–∫–æ–≥–æ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∞'

    send(peer, response)


def exec_rename(cmd, chat, peer, sender, args):
    """
    !–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
    """
    name_old = args[0]
    name_new = args[1]

    if name_new in FORBIDDEN_NAMES or len(name_new) < 2 or len(name_new) > 30 or not re.match(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]',
                                                                                              name_new):
        send(peer, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º: " + name_new)
        return

    existing = groupsmgr.get_all_groups(chat)

    if name_old not in existing:
        send(peer, "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + name_old)
        return
    if name_new in existing:
        send(peer, "–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + name_new)
        return

    groupsmgr.rename_group(chat, name_old, name_new)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    response += '–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ' + name_new
    send(peer, response)


def exec_change_rank(cmd, chat, peer, sender, args):
    """
    –ö–æ–º–∞–Ω–¥–∞, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
    TODO –ê–Ω—Ç–æ—à–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–µ—Ç, —É –Ω–µ–≥–æ –≤ –≥–æ–ª–æ–≤–µ –Ω–æ—Ä–º –∏–¥–µ—è
    """
    change_to_this_rank = args[0].upper()  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å FIX PLS
    sender_rank = groupsmgr.get_rank_user(chat, sender)
    if change_to_this_rank not in Rank.__members__:
        send(peer, '–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–∫–æ–π —Ä–∞–Ω–≥')
        return
    if Rank[sender_rank].value < Rank[change_to_this_rank].value:
        send(peer, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–Ω–≥')
        return
    users = re.findall(r'\[id+(\d+)\|\W*\w+\]', ' '.join(args[1:]))
    if not users:
        cmd.print_usage(peer)
        return
    users_up = []
    users_down = []
    users_eq = []
    users_error = []
    existing_users = groupsmgr.get_all_users(chat)
    users = [int(user) for user in users]

    for user in users:
        if user in existing_users:
            user_rank = groupsmgr.get_rank_user(chat, user)
            if Rank[change_to_this_rank].value > Rank[user_rank].value:
                groupsmgr.change_rank(chat, user, change_to_this_rank)
                users_up.append(user)
            elif Rank[change_to_this_rank].value < Rank[user_rank].value < Rank[sender_rank].value:
                groupsmgr.change_rank(chat, user, change_to_this_rank)
                users_down.append(user)
            else:
                users_eq.append(user)
        else:
            users_error.append(user)
    all_users_vk = vk.users.get(user_ids=users)
    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''
    # –¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ø–æ–º–æ–≥–∏—Ç–µ
    if users_up:
        response += "–ü–æ–≤—ã—à–µ–Ω—ã –≤ —Ä–∞–Ω–≥–µ –¥–æ {0}: \n".format(change_to_this_rank)
        for user in users_up:
            for user_vk in all_users_vk:  # –¥–∞ –±—Ä–µ–¥, –ø–æ—Ç–æ–º —á—ë-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é
                if user == user_vk["id"]:
                    response += "üîº {0} {1} \n".format(user_vk["first_name"], user_vk["last_name"])

    if users_down:
        response += "–ü–æ–Ω–∏–∂–µ–Ω—ã –≤ —Ä–∞–Ω–≥–µ –¥–æ {0}: \n".format(change_to_this_rank)
        for user in users_down:
            for user_vk in all_users_vk:  # –¥–∞ –±—Ä–µ–¥, –ø–æ—Ç–æ–º —á—ë-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é
                if user == user_vk["id"]:
                    response += "üîΩ {0} {1} \n".format(user_vk["first_name"], user_vk["last_name"])

    if users_eq:
        response += "–†–∞–Ω–≥ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω: \n"
        for user in users_eq:
            for user_vk in all_users_vk:  # –¥–∞ –±—Ä–µ–¥, –ø–æ—Ç–æ–º —á—ë-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é
                if user == user_vk["id"]:
                    response += "‚ñ∂ {0} {1} \n".format(user_vk["first_name"], user_vk["last_name"])

    if users_error:
        response += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–Ω—ã: \n"
        for user in users_error:
            for user_vk in all_users_vk:  # –¥–∞ –±—Ä–µ–¥, –ø–æ—Ç–æ–º —á—ë-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é
                if user == user_vk["id"]:
                    response += "‚ùå {0} {1} \n".format(user_vk["first_name"], user_vk["last_name"])

    send(peer, response)


def exec_week(cmd, chat, peer, sender):
    """
    !–Ω–µ–¥–µ–ª—è
    """
    send(peer, str("–°–µ–π—á–∞—Å " + timetable.get_week() + " –Ω–µ–¥–µ–ª—è").upper())


def exec_roulette(cmd, chat, peer, sender):
    response = "–ò–≥—Ä–∞–µ–º –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É. –ò –ø—Ä–æ–∏–≥—Ä–∞–ª —É –Ω–∞—Å: "
    users = groupsmgr.get_all_users(chat)
    random_user = users[vk_api.utils.get_random_id() % len(users)]
    user_photo = vk.users.get(user_id=random_user, fields=["photo_id"])[0]["photo_id"]
    send(peer, response, "photo" + user_photo)


def exec_use_attachment(chat, peer, tag):
    """
    ? - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è + —Ç–µ–∫—Å—Ç
    """
    attachment = groupsmgr.get_attachment(chat, tag)
    if attachment:
        send(peer, attachment["message"], attachment["attachments"])


def exec_add_one_attachment(cmd, chat, peer, sender, args, attachments):
    tag = args[0].lower()
    message = args[1:] if len(args) > 1 else []
    message = ' '.join(message)

    if not message and not attachments:
        cmd.print_usage(peer)
        return
    if groupsmgr.get_attachment(chat, tag):
        send(peer, "–î–∞–Ω–Ω—ã–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return

    list_attachments = get_list_attachments(attachments, peer)

    if not list_attachments and not message:
        send(peer, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å")
        return

    groupsmgr.add_attachment(chat, tag, message, list_attachments)
    send(peer, "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –≤–ª–æ–∂–µ–Ω–∏–µ")


def exec_add_many_attachments(cmd, chat, peer, sender, args, attachments):
    tags = args
    created = []
    already_existed = []
    if not attachments or len(tags) > 4:
        cmd.print_usage(peer)
        return

    for number, tag in enumerate(tags):
        tag = tag.lower()
        if groupsmgr.get_attachment(chat, tag):
            already_existed.append(tag)
        else:
            if number + 1 > len(attachments):
                break
            attachment = get_list_attachments([attachments[number]], peer)

            if not attachment:
                continue
            created.append(tag)
            groupsmgr.add_attachment(chat, tag, '', attachment)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if created:
        response += '–î–æ–±–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π: \n‚ûï '
        response += ' \n‚ûï '.join(created)
        response += ' \n'

    if already_existed:
        response += '–≠—Ç–∏ —Ç–µ–≥–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: \n‚úî '
        response += ' \n‚úî '.join(already_existed)
        response += ' \n'

    send(peer, response)


def exec_edit_attachment(cmd, chat, peer, sender, args, attachments):
    tag = args[0].lower()
    message = args[1:] if len(args) > 1 else []
    message = ' '.join(message)

    if not message and not attachments:
        cmd.print_usage(peer)
        return
    if not groupsmgr.get_attachment(chat, tag):
        send(peer, "–î–∞–Ω–Ω—ã–π —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    list_attachments = get_list_attachments(attachments, peer)

    if not list_attachments and not message:
        send(peer, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å")
        return

    groupsmgr.edit_attachment(chat, tag, message, list_attachments)
    send(peer, "–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞ –≤–ª–æ–∂–µ–Ω–∏–µ")


def exec_remove_attachment(cmd, chat, peer, sender, args):
    tags = args
    deleted = []
    not_found = []

    for tag in tags:
        tag = tag.lower()
        if groupsmgr.get_attachment(chat, tag):
            deleted.append(tag)
            groupsmgr.remove_attachment(chat, tag)
        else:
            not_found.append(tag)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if deleted:
        response += '–£–¥–∞–ª–∏–ª–∞ —Ç–µ–≥–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π: \n‚ûï '
        response += ' \n‚úñ '.join(deleted)
        response += ' \n'

    if not_found:
        response += '–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç—Ç–∏ —Ç–µ–≥–∏: \n‚úî '
        response += ' \n‚õî '.join(not_found)
        response += ' \n'

    send(peer, response)


def exec_change_name_chat(cmd, chat, peer, sender, args):
    """
    —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    !name - –º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã
    """
    new_name = args[0]
    if new_name in groupsmgr.get_names_chats():
        send(peer, "–î–∞–Ω–Ω–æ–µ –∏–º—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return
    if new_name.isdigit():
        send(peer, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
        return
    groupsmgr.change_name_chat(chat, new_name)
    send(peer, "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞ –∏–º—è –±–µ—Å–µ–¥—ã")


def exec_ruslan(cmd, chat, peer, sender):
    """
    !—Ä—É—Å–ª–∞–Ω - –ø—Ä–æ—Å—Ç–æ –†—É—Å–ª–∞–Ω (—à–∞—Ä —Å—É–¥—å–±—ã)
    """
    answers = ["–ë–µ—Å–ø–æ—Ä–Ω–æ", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
               "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - ¬´–¥–∞¬ª", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ", "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - ¬´–¥–∞¬ª", "–î–∞",
               "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å",
               "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π", "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"]
    final_answer = answers[os.urandom(1)[0] % 20]
    send(peer, final_answer)


def exec_choose(cmd, chat, peer, sender, args):
    """
    !–≤—ã–±–æ—Ä - –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã
    """
    number = args[0]

    if not str(number).isdigit() or not int(number) > 0:
        cmd.print_usage(peer)
        return

    response = "–°–ª—É—á–∞–π–Ω–æ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã: \n"

    users = groupsmgr.get_all_users(chat)
    count = len(users) - int(number)

    for i in range(count):
        users.remove(users[os.urandom(1)[0] % len(users)])
    users_vk = vk.users.get(user_ids=users)
    for number, user in enumerate(users_vk):
        response += str(number + 1) + ". " + user["first_name"] + " " + user[
            "last_name"] + " \n"
    send(peer, response)


def exec_gate(cmd, chat, peer, sender):  # –ø–æ–∫–∞ —Ç–∞–∫, –¥–∞–ª—å—à–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º
    """
    !–≤–æ—Ä–æ—Ç–∞
    """
    format_time = '%H:%S'
    timezone = 2 * 60 * 60  # +2 —á–∞—Å–∞
    time_open_gate = [
        ['08:30', '09:00'],
        ['13:00', '14:00'],
        ['17:00', '18:30']
    ]
    time_open_gate.sort()
    time_now_struct = time.gmtime(time.time() + timezone)
    time_now = time_now_struct.tm_hour * 3600 + time_now_struct.tm_min * 60 + time_now_struct.tm_sec

    for number, time_gate in enumerate(time_open_gate):
        # —è –∏—Å–∫–∞–ª –ª–µ–≥—á–µ –ø—É—Ç—å, –Ω–æ —è –æ–±–æ–∂–∞—é –≤—Ä–µ–º—è ‚òª
        time_start_now = time.strptime(time_gate[0], format_time).tm_hour * 60 * 60 + time.strptime(time_gate[0], format_time).tm_min * 60
        time_end_now = time.strptime(time_gate[1], format_time).tm_hour * 60 * 60 + time.strptime(time_gate[1], format_time).tm_min * 60
        time_start_next = time.strptime(time_open_gate[(number + 1) % len(time_open_gate)][0], format_time).tm_hour * 60 * 60 + time.strptime(time_open_gate[(number + 1) % len(time_open_gate)][0], format_time).tm_min * 60
        if time_start_now <= time_now <= time_end_now:
            response = "–í–æ—Ä–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã. –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è "
            time_closing = time_end_now - time_now
            response += timetable.time_left_ru(
                time_closing // (60 * 60),
                time_closing % (60 * 60) // 60,
                time_closing % (60 * 60) % 60
            )
            send(peer, response)
            return
        elif time_end_now < time_now < time_start_next:
            response = "–í–æ—Ä–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç—ã. –î–æ –æ—Ç–∫—Ä—ã—Ç–∏—è "
            time_opening = time_start_next - time_now
            response += timetable.time_left_ru(
                time_opening // (60 * 60),
                time_opening % (60 * 60) // 60,
                time_opening % (60 * 60) % 60
            )
            send(peer, response)
            return
        elif (number + 1) == len(time_open_gate) and (time_end_now < time_now or time_now < time_start_next):
            response = "–í–æ—Ä–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç—ã. –î–æ –æ—Ç–∫—Ä—ã—Ç–∏—è "
            time_opening = (time_start_next - time_now) if time_start_next > time_now else (24 * 60 * 60 - time_now + time_start_next)
            response += timetable.time_left_ru(
                time_opening // (60 * 60),
                time_opening % (60 * 60) // 60,
                time_opening % (60 * 60) % 60
            )
            send(peer, response)
            return
    send(peer, "–ù–µ—Ç—É –≤—Ä–µ–º–µ–Ω–∏")


def exec_bfu(cmd, chat, peer, sender):
    """
    !–±—Ñ—É - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–µ—Ñ –≤ –ë–§–£
    """
    send(peer, "", ["photo-199300529_457239023"])


def exec_create_emails(cmd, chat, peer, sender, args):
    tags = args
    all_tags = groupsmgr.get_all_emails(chat)
    created = []
    already_existed = []
    for tag in tags:
        tag = tag.lower()
        if tag in all_tags:
            already_existed.append(tag)
        else:
            created.append(tag)
            groupsmgr.create_email(chat, tag)
    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''
    if created:
        response += '–î–æ–±–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—á—Ç—ã: \n‚ûï '
        response += ' \n‚ûï '.join(created)
        response += ' \n'

    if already_existed:
        response += '–≠—Ç–∏ —Ç–µ–≥–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: \n‚úî '
        response += ' \n‚úî '.join(already_existed)
        response += ' \n'

    send(peer, response)


def exec_delete_emails(cmd, chat, peer, sender, args):
    tags = args
    all_tags = groupsmgr.get_all_emails(chat)
    deleted = []
    not_found = []
    for tag in tags:
        tag = tag.lower()
        if tag in all_tags:
            deleted.append(tag)
            groupsmgr.delete_email(chat, tag)
        else:
            not_found.append(tag)
    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''
    if deleted:
        response += '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∞ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—á—Ç—ã: \n‚úñ '
        response += ' \n‚úñ '.join(deleted)
        response += ' \n'

    if not_found:
        response += '–ù–µ –Ω–∞—à–ª–∞ –≤–æ—Ç —ç—Ç–∏ —Ç–µ–≥–∏: \n‚õî '
        response += ' \n‚õî '.join(not_found)
        response += ' \n'

    send(peer, response)


def exec_add_event_to_email(cmd, chat, peer, sender, args, attachments):
    format_date = "%d.%m"
    format_date_string = "–î–î.–ú–ú"
    timezone = 2 * 60 * 60  # +2 —á–∞—Å–∞
    tag = args[0].lower()

    all_tags = groupsmgr.get_all_emails(chat)
    if tag not in all_tags:
        send(peer, "–î–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        return

    date_string = args[1]
    message = args[2:] if len(args) > 2 else []
    message = ' '.join(message)

    try:
        date_event = time.strptime(date_string, format_date)
        time_now_struct = time.gmtime(time.time() + timezone)
        if date_event.tm_mon > time_now_struct.tm_mon or (date_event.tm_mon == time_now_struct.tm_mon and date_event.tm_mday >= time_now_struct.tm_mday):
            date_to_db = '.'.join([str(date_event.tm_mday).rjust(2, '0'), str(date_event.tm_mon).rjust(2, '0'), str(time_now_struct.tm_year)])
        else:
            date_to_db = '.'.join([str(date_event.tm_mday).rjust(2, '0'), str(date_event.tm_mon).rjust(2, '0'), str(time_now_struct.tm_year + 1)])
    except ValueError:
        send(peer, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –§–æ—Ä–º–∞—Ç: " + format_date_string)
        return

    if not message and not attachments:
        cmd.print_usage(peer)
        return

    list_attachments = get_list_attachments(attachments, peer)

    if not list_attachments and not message:
        send(peer, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
        return

    groupsmgr.create_event(chat, tag, date_to_db, message, list_attachments)

    send(peer, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")


def exec_choose_chat_keyboard(cmd, chat, peer, sender, args):
    chats_sender = groupsmgr.get_chats_user(sender)
    if not chats_sender:
        send(peer, "–í–∞—Å –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –±–µ—Å–µ–¥–µ")
        return
    page = args[0]
    max_chats = 6
    if page > (len(chats_sender) - 1) // max_chats:
        page = (len(chats_sender) - 1) // max_chats
    elif page < 0:
        page = 0
    keyboard = VkKeyboard()
    for number, chat_number in enumerate(chats_sender[page * max_chats:(page * max_chats + max_chats) if page * max_chats + max_chats <= len(chats_sender) else len(chats_sender)]):
        if number % 2 == 0 and number != 0:
            keyboard.add_line()
        keyboard.add_button(chat_number['name'],
                            payload={'action': '—Å—Ç–∞—Ä—Ç–æ–≤–∞—è_–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 'chat_id': chat_number['chat_id']})
    keyboard.add_line()
    keyboard.add_button('–ù–∞–∑–∞–¥',
                        color=VkKeyboardColor.PRIMARY,
                        payload={'action': '–≤—ã–±–æ—Ä_–±–µ—Å–µ–¥—ã', 'chat_id': chat, 'args': [page - 1]})
    if chat != -1:
        keyboard.add_button('–í—ã—Ö–æ–¥',
                            color=VkKeyboardColor.NEGATIVE,
                            payload={'action': '—Å—Ç–∞—Ä—Ç–æ–≤–∞—è_–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 'chat_id': chat})

    keyboard.add_button('–î–∞–ª–µ–µ',
                        color=VkKeyboardColor.PRIMARY,
                        payload={'action': '–≤—ã–±–æ—Ä_–±–µ—Å–µ–¥—ã', 'chat_id': chat, 'args': [page + 1]})
    send(peer, "–í—ã–±–µ—Ä–∏—Ç–µ –±–µ—Å–µ–¥—É", [], keyboard.get_keyboard())


def exec_choose_members_group(cmd, chat, peer, sender, args):
    existing = groupsmgr.get_all_groups(chat)
    if not existing:
        send(peer, "–ì—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", [], start_keyboard(chat))
        return
    page = args[0]
    max_groups = 6
    if page > (len(existing) - 1) // max_groups:
        page = (len(existing) - 1) // max_groups
    elif page < 0:
        page = 0
    keyboard = VkKeyboard()
    for number, group in enumerate(existing[page * max_groups:(page * max_groups + max_groups) if page * max_groups + max_groups <= len(existing) else len(existing)]):
        if number % 2 == 0 and number != 0:
            keyboard.add_line()
        keyboard.add_button(group,
                            payload={'action': '—Å–æ—Å—Ç–∞–≤_–≥—Ä—É–ø–ø—ã', 'chat_id': chat, 'args': [group]})
    keyboard.add_line()
    keyboard.add_button('–ù–∞–∑–∞–¥',
                        color=VkKeyboardColor.PRIMARY,
                        payload={'action': '—Å–æ—Å—Ç–∞–≤_–≥—Ä—É–ø–ø—ã_–≤—ã–±–æ—Ä', 'chat_id': chat, 'args': [page - 1]})
    if chat != -1:
        keyboard.add_button('–í—ã—Ö–æ–¥',
                            color=VkKeyboardColor.NEGATIVE,
                            payload={'action': '—Å—Ç–∞—Ä—Ç–æ–≤–∞—è_–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 'chat_id': chat})

    keyboard.add_button('–î–∞–ª–µ–µ',
                        color=VkKeyboardColor.PRIMARY,
                        payload={'action': '—Å–æ—Å—Ç–∞–≤_–≥—Ä—É–ø–ø—ã_–≤—ã–±–æ—Ä', 'chat_id': chat, 'args': [page + 1]})
    send(peer, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", [], keyboard.get_keyboard())


def exec_choose_tag_email(cmd, chat, peer, sender, args):
    tags = groupsmgr.get_all_emails(chat)
    if not tags:
        send(peer, "–¢–µ–≥–∏ –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", [], start_keyboard(chat))
        return
    page = args[0]
    max_tags = 6
    if page > (len(tags) - 1) // max_tags:
        page = (len(tags) - 1) // max_tags
    elif page < 0:
        page = 0
    keyboard = VkKeyboard()
    for number, tag in enumerate(tags[page * max_tags:(page * max_tags + max_tags) if page * max_tags + max_tags <= len(tags) else len(tags)]):
        if number % 2 == 0 and number != 0:
            keyboard.add_line()
        keyboard.add_button(tag,
                            payload={'action': '–ø–æ—á—Ç–∞_–≤—ã–±–æ—Ä_—Å–æ–±—ã—Ç–∏—è', 'chat_id': chat, 'args': [tag, 0]})
    keyboard.add_line()
    keyboard.add_button('–ù–∞–∑–∞–¥',
                        color=VkKeyboardColor.PRIMARY,
                        payload={'action': '–ø–æ—á—Ç–∞_–≤—ã–±–æ—Ä_—Ç–µ–≥', 'chat_id': chat, 'args': [page - 1]})
    if chat != -1:
        keyboard.add_button('–í—ã—Ö–æ–¥',
                            color=VkKeyboardColor.NEGATIVE,
                            payload={'action': '—Å—Ç–∞—Ä—Ç–æ–≤–∞—è_–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 'chat_id': chat})

    keyboard.add_button('–î–∞–ª–µ–µ',
                        color=VkKeyboardColor.PRIMARY,
                        payload={'action': '–ø–æ—á—Ç–∞_–≤—ã–±–æ—Ä_—Ç–µ–≥', 'chat_id': chat, 'args': [page + 1]})
    send(peer, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –ø–æ—á—Ç—ã", [], keyboard.get_keyboard())


def exec_choose_events_email(cmd, chat, peer, sender, args):
    tag = args[0]
    events = groupsmgr.get_events_for_email(chat, tag)
    if not events:
        send(peer, "–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥—ë–Ω—ã", [], start_keyboard(chat))
        return
    page = args[1]
    max_events = 6
    if page > (len(events) - 1) // max_events:
        page = (len(events) - 1) // max_events
    elif page < 0:
        page = 0
    keyboard = VkKeyboard()
    for number, event in enumerate(events[page * max_events:(page * max_events + max_events) if page * max_events + max_events <= len(events) else len(events)]):
        if number % 2 == 0 and number != 0:
            keyboard.add_line()
        keyboard.add_button(event['date'],
                            payload={'action': '—Å–æ–±—ã—Ç–∏–µ', 'chat_id': chat, 'args': [tag, event['id']]})
    keyboard.add_line()
    keyboard.add_button('–ù–∞–∑–∞–¥',
                        color=VkKeyboardColor.NEGATIVE,
                        payload={'action': '–ø–æ—á—Ç–∞_–≤—ã–±–æ—Ä_—Ç–µ–≥', 'chat_id': chat, 'args': [0]})

    send(peer, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è", [], keyboard.get_keyboard())


def exec_send_start_keyboard(cmd, chat, peer, sender):
    send(peer, '–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é', [], start_keyboard(chat))


def exec_all_groups(cmd, chat, peer, sender):
    existing = groupsmgr.get_all_groups(chat)
    response = '–í—Å–µ –≥—Ä—É–ø–ø—ã: \n'
    for number, group in enumerate(existing):
        response += str(number + 1) + '. ' + group + ' \n'
    if existing:
        send(peer, response, [], start_keyboard(chat))
    else:
        send(peer, '–ù–µ –Ω–∞—à–ª–∞ –≥—Ä—É–ø–ø –≤ –±–µ—Å–µ–¥–µ', [], start_keyboard(chat))


def exec_my_groups(cmd, chat, peer, sender):
    sender_groups = groupsmgr.get_user_groups(chat, sender)
    response = '–í–∞—à–∏ –≥—Ä—É–ø–ø—ã: \n'
    for number, group in enumerate(sender_groups):
        response += str(number + 1) + '. ' + group + ' \n'
    if sender_groups:
        send(peer, response, [], start_keyboard(chat))
    else:
        send(peer, '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–µ –≤ –∫–∞–∫–æ–π –∏–∑ –≥—Ä—É–ø–ø', [], start_keyboard(chat))


def exec_members_group(cmd, chat, peer, sender, args):
    group = args[0]
    existing = groupsmgr.get_all_groups(chat)
    if group not in existing:
        send(peer, '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç', [], start_keyboard(chat))

    members = groupsmgr.get_members_group(chat, group)

    if members:
        response = '–£—á–∞—Å—Ç–Ω–∏–∫–∏: \n'
        users_vk = vk.users.get(user_ids=members)
        for number, user in enumerate(users_vk):
            response += str(number + 1) + ". " + user["first_name"] + " " + user[
                "last_name"] + " \n"
        send(peer, response, [], start_keyboard(chat))
    else:
        send(peer, '–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞', [], start_keyboard(chat))


def exec_event_email(cmd, chat, peer, sender, args):
    tag = args[0]
    event_id = args[1]

    events = groupsmgr.get_events_for_email(chat, tag)
    for event in events:
        if event["id"] == event_id:
            send(peer, event['message'], event['attachments'], start_keyboard(chat))
            return
    send(peer, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–µ–Ω–æ)", [], start_keyboard(chat))
