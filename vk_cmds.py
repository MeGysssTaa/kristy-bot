import re

import groupsmgr
import timetable

# –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —ç—Ç–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.
FORBIDDEN_NAMES = ['all', '–≤—Å–µ', 'online', '–æ–Ω–ª–∞–π–Ω', '–∑–¥–µ—Å—å', 'here', '—Ç—É—Ç']
# –ø–æ–∫–∞ —Ç–∞–∫, –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ª—É—á—à–µ
RANK_KING = 2
RANK_ADMIN = 1
RANK_HOLOP = 0

def exec_next_class(cmd, chat, peer, sender):
    """
    !–ø–∞—Ä–∞
    """
    sender_groups = groupsmgr.get_groups(cmd.chats, chat, sender)
    next_class = timetable.next_class(chat, sender_groups)

    if next_class is None:
        cmd.send(peer, 'üö´ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë. –ò–¥–∏ –ø–æ—Å–ø–∏, —á—Ç–æ –ª–∏.')
    else:
        class_data = next_class[0]
        time_left = timetable.time_left(next_class[1])
        cmd.send(peer, 'üìö –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: %s. –î–æ –Ω–∞—á–∞–ª–∞ %s.' % (class_data, time_left))


def exec_create(cmd, chat, peer, sender, args):
    """
    !—Å–æ–∑–¥–∞—Ç—å
    """
    existing = groupsmgr.get_all_groups(cmd.chats, chat)

    created = []
    bad_names = []
    already_existed = []

    for group in args:
        if 2 <= len(group) <= 30 and re.match(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]', group) and group not in FORBIDDEN_NAMES:
            if group not in existing:
                groupsmgr.create_group(cmd.chats, chat, group, sender)
                created.append(group)
            else:
                already_existed.append(group)
        else:
            bad_names.append(group)

    if peer > 2E9:
        name_data = cmd.vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if created:
        response += '–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚ûï '
        response += ' \n‚ûï '.join(created)

    if already_existed:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: \n‚úî '
        response += ' \n‚úî '.join(already_existed)

    if bad_names:
        response += '–ù–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∏—Ö –≥—Ä—É–ø–ø –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã: \nüö´ '
        response += ' \nüö´ '.join(bad_names)

    cmd.send(peer, response)


def exec_delete(cmd, chat, peer, sender, args):
    """
    !—É–¥–∞–ª–∏—Ç—å
    """
    deleted = []
    not_found = []
    not_creator = []

    rank_user = groupsmgr.get_rank_user(cmd.chats, chat, sender)
    existing = groupsmgr.get_all_groups(cmd.chats, chat)
    sender_created_groups = groupsmgr.get_groups_created_user(cmd.chats, chat, sender)

    for group in args:
        if group in existing:
            if group in sender_created_groups or rank_user > RANK_HOLOP:
                deleted.append(group)
                groupsmgr.delete_group(cmd.chats, chat, group)
            else:
                not_creator.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = cmd.vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if deleted:
        response += '–Ø —É–¥–∞–ª–∏–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚úñ '
        response += ' \n‚úñ '.join(deleted)

    if not_found:
        response += '–≠—Ç–∏—Ö –≥—Ä—É–ø–ø –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ: \n‚õî '
        response += ' \n‚õî '.join(not_found)

    if not_creator:
        response += '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \nüö´ '
        response += ' \nüö´ '.join(not_creator)

    cmd.send(peer, response)


