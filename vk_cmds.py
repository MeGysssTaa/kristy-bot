import re
from enum import Enum, auto
import groupsmgr
import timetable
import vk_api
from kristybot import GetVkSession

vk_session = GetVkSession()
vk = vk_session.get_api()

# –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —ç—Ç–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.
FORBIDDEN_NAMES = ['all', '–≤—Å–µ', 'online', '–æ–Ω–ª–∞–π–Ω', '–∑–¥–µ—Å—å', 'here', '—Ç—É—Ç']
MAX_MSG_LEN = 4096


class Rank(Enum):
    """
    –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤:
    GOVNO     - –ù–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –º–Ω–µ –∂–∞–ª–∫–æ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—É–¥–µ—Ç
    WORKER    - –ú–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø, —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã, —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                –≥—Ä—É–ø–ø—ã, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –≤–ª–æ–∂–µ–Ω–∏–π –±–æ—Ç–∞, –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã,
                –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—Å—ë —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ
    USER      - –ú–æ–∂–µ—Ç —Ç–µ–≥–∞—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º, –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—á—Ç—É –≥—Ä—É–ø–ø—ã
    PRO       - –ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã, –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
                –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª—é–¥–µ–π –∏–ª–∏ –∏–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É
    MODERATOR - –ú–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç –≥—Ä—É–ø–ø, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è—Ç—å –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª
    ADMIN     - –ü–æ —Å—É—Ç–∏ —ç—Ç–æ –∫–∞–∫ –∫–æ—Ä–æ–ª—å, —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å 1, –∞–¥–º–∏–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
    KING      - –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–ª–∞—Å—Ç—å –Ω–∞–¥ —á–∞—Ç–æ–º
    """
    GOVNO = auto()
    WORKER = auto()
    USER = auto()
    PRO = auto()
    MODERATOR = auto()
    ADMIN = auto()
    KING = auto()


RANK_HOLOP = 0
RANK_ADMIN = 1
RANK_KING = 2


def send(peer, msg, attachment=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç
    –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é (MAX_MSG_LEN), —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ,
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —á–∞—Å—Ç—è–º–∏.

    :param peer: –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (peer_id).
    :param msg: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param attachment: –í–ª–æ–∂–µ–Ω–∏—è

    TODO: —Å–¥–µ–ª–∞—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –±–æ–ª–µ–µ "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º" - —Å—Ç–∞—Ä–∞—Ç—å—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º.
    """
    if len(msg) <= MAX_MSG_LEN:
        vk.messages.send(peer_id=peer, message=msg, attachment=attachment, random_id=int(vk_api.utils.get_random_id()))
    else:
        chunks = (msg[k:k + MAX_MSG_LEN] for k in range(0, len(msg), MAX_MSG_LEN))

        for chunk in chunks:
            vk.messages.send(peer_id=peer, message=chunk, random_id=int(vk_api.utils.get_random_id()))


def exec_next_class(cmd, chat, peer, sender):
    """
    !–ø–∞—Ä–∞
    """
    sender_groups = groupsmgr.get_user_groups(chat, sender)
    next_class = timetable.next_class(chat, sender_groups)

    if next_class is None:
        send(peer, 'üö´ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë. –ò–¥–∏ –ø–æ—Å–ø–∏, —á—Ç–æ –ª–∏.')
    else:
        class_data = next_class[0]
        time_left = timetable.time_left(next_class[1])
        time_left_str = '–î–æ –Ω–∞—á–∞–ª–∞ ' + time_left + '.' if time_left is not None else '–ó–∞–Ω—è—Ç–∏–µ –≤–æ—Ç-–≤–æ—Ç –Ω–∞—á–Ω—ë—Ç—Å—è!'
        send(peer, 'üìö –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: %s. %s' % (class_data, time_left_str))


def exec_create(cmd, chat, peer, sender, args):
    """
    !—Å–æ–∑–¥–∞—Ç—å
    """
    existing = groupsmgr.get_all_groups(chat)

    created = []
    bad_names = []
    already_existed = []

    for group in args:
        if 2 <= len(group) <= 30 and re.match(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]', group) and group not in FORBIDDEN_NAMES:
            if group not in existing:
                groupsmgr.create_group(chat, group, sender)
                created.append(group)
            else:
                already_existed.append(group)
        else:
            bad_names.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if created:
        response += '–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚ûï '
        response += ' \n‚ûï '.join(created)
        response += ' \n'

    if already_existed:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: \n‚úî '
        response += ' \n‚úî '.join(already_existed)
        response += ' \n'

    if bad_names:
        response += '–ù–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∏—Ö –≥—Ä—É–ø–ø –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã: \nüö´ '
        response += ' \nüö´ '.join(bad_names)
        response += ' \n'

    send(peer, response)


def exec_delete(cmd, chat, peer, sender, args):
    """
    !—É–¥–∞–ª–∏—Ç—å
    """
    deleted = []
    not_found = []
    not_creator = []

    rank_user = groupsmgr.get_rank_user(chat, sender)
    existing = groupsmgr.get_all_groups(chat)
    sender_created_groups = groupsmgr.get_groups_created_user(chat, sender)

    for group in args:
        if group in existing:
            if group in sender_created_groups or rank_user > RANK_HOLOP:
                deleted.append(group)
                groupsmgr.delete_group(chat, group)
            else:
                not_creator.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if deleted:
        response += '–Ø —É–¥–∞–ª–∏–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚úñ '
        response += ' \n‚úñ '.join(deleted)
        response += ' \n'

    if not_found:
        response += '–≠—Ç–∏—Ö –≥—Ä—É–ø–ø –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ: \n‚õî '
        response += ' \n‚õî '.join(not_found)
        response += ' \n'

    if not_creator:
        response += '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \nüö´ '
        response += ' \nüö´ '.join(not_creator)
        response += ' \n'

    send(peer, response)


def exec_join(cmd, chat, peer, sender, args):
    """
    !–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    """
    joined = []
    already_joined = []  # –ø–µ—Ä–µ–∏–º–µ–Ω–Ω–æ–≤–∞—Ç—å
    not_found = []

    sender_groups = groupsmgr.get_user_groups(chat, sender)
    existing = groupsmgr.get_all_groups(chat)

    for group in args:
        if group in existing:
            if group not in sender_groups:
                joined.append(group)
                groupsmgr.join_group(chat, group, sender)
            else:
                already_joined.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if joined:
        response += '–î–æ–±–∞–≤–∏–ª–∞ –≤–∞—Å –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚ûï '
        response += ' \n‚ûï '.join(joined)
        response += ' \n'

    if already_joined:
        response += '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö: \n‚úî '
        response += ' \n‚úî '.join(already_joined)
        response += ' \n'

    if not_found:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —è –Ω–µ –Ω–∞—à–ª–∞: \nüö´ '
        response += ' \nüö´ '.join(not_found)
        response += ' \n'

    send(peer, response)


def exec_left(cmd, chat, peer, sender, args):
    """
    !–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è
    """
    left = []
    already_left = []
    not_found = []

    sender_groups = groupsmgr.get_user_groups(chat, sender)
    existing = groupsmgr.get_all_groups(chat)

    for group in args:
        if group in existing:
            if group in sender_groups:
                left.append(group)
                groupsmgr.left_group(chat, group, sender)
            else:
                already_left.append(group)
        else:
            not_found.append(group)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if left:
        response += '–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∞ –≤–∞—Å –æ—Ç –≥—Ä—É–ø–ø: \n‚úñ '
        response += ' \n‚úñ '.join(left)
        response += ' \n'

    if already_left:
        response += '–í–∞—Å –∏ –Ω–µ –±—ã–ª–æ –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö: \n‚õî '
        response += ' \n‚õî '.join(already_left)
        response += ' \n'

    if not_found:
        response += '–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —è –Ω–µ –Ω–∞—à–ª–∞: \nüö´ '
        response += ' \nüö´ '.join(not_found)
        response += ' \n'

    send(peer, response)


def exec_join_members(cmd, chat, peer, sender, args):
    """
    !–ø–æ–¥–∫–ª—é—á–∏—Ç—å
    """
    rank_sender = groupsmgr.get_rank_user(chat, sender)
    if rank_sender == RANK_HOLOP:
        send(peer, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    if '>' not in args or args.count('>') > 1:
        cmd.print_usage(peer)
        return
    users = re.findall(r'\[id+(\d+)\|\W*\w+\]', ' '.join(args[:args.index('>')]))
    groups = list(filter(re.compile(
        r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]').match,
                         args[args.index('>') + 1:] if len(args) - 1 > args.index('>') else []))
    if not users or not groups:
        cmd.print_usage(peer)
        return

    users = [int(user) for user in users]
    existing_groups = groupsmgr.get_all_groups(chat)
    existing_users = groupsmgr.get_all_users(chat)

    not_found = []
    joined = {}
    for user in users:
        if user in existing_users:
            joined.update({user: []})
            sender_groups = groupsmgr.get_user_groups(chat, user)
            for group in groups:
                if group in existing_groups and group not in sender_groups:
                    groupsmgr.join_group(chat, group, user)
                    joined[user].append(group)
            if not joined[user]:
                del joined[user]
        else:
            not_found.append(user)

    all_users_vk = vk.users.get(user_ids=users)
    first_names_joined = ""
    first_names_not_found = ""
    for user_vk in all_users_vk:  # —Ö—Ä–µ–Ω –µ–≥–æ –∑–Ω–∞–µ—Ç, –º–± –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º
        if user_vk["id"] in joined:
            first_names_joined += "{0} > {1} \n".format("[id{0}|{1}]".format(str(user_vk["id"]), user_vk["first_name"]),
                                                        ' '.join(joined[user_vk["id"]]))
        if user_vk["id"] in not_found:
            first_names_not_found += "[id{0}|{1}] \n".format(str(user_vk["id"]), user_vk["first_name"])

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if first_names_joined:
        response += '–î–æ–±–∞–≤–∏–ª–∞: \n'
        response += first_names_joined

    if first_names_not_found:
        response += '–î–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \n'
        response += first_names_not_found

    if not first_names_not_found and not first_names_joined:
        response += '–ù–∏–∫—Ç–æ –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'

    send(peer, response)


def exec_left_members(cmd, chat, peer, sender, args):
    """
    !–æ—Ç–∫–ª—é—á–∏—Ç—å
    """
    rank_sender = groupsmgr.get_rank_user(chat, sender)
    if rank_sender < RANK_KING:
        send(peer, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    if '>' not in args or args.count('>') > 1:
        cmd.print_usage(peer)
        return
    users = re.findall(r'\[id+(\d+)\|\W*\w+\]', ' '.join(args[:args.index('>')]))
    groups = list(filter(re.compile(
        r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]').match,
                         args[args.index('>') + 1:] if len(args) - 1 > args.index('>') else []))
    if not users or not groups:
        cmd.print_usage(peer)
        return

    users = [int(user) for user in users]
    existing_groups = groupsmgr.get_all_groups(chat)
    existing_users = groupsmgr.get_all_users(chat)

    not_found = []
    left = {}
    for user in users:
        if user in existing_users:
            left.update({user: []})
            sender_groups = groupsmgr.get_user_groups(chat, user)
            for group in groups:
                if group in existing_groups and group in sender_groups:
                    groupsmgr.left_group(chat, group, user)
                    left[user].append(group)
            if not left[user]:
                del left[user]
        else:
            not_found.append(user)

    all_users_vk = vk.users.get(user_ids=users)
    first_names_left = ""
    first_names_not_found = ""
    for user_vk in all_users_vk:  # —Ö—Ä–µ–Ω –µ–≥–æ –∑–Ω–∞–µ—Ç, –º–± –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º
        if user_vk["id"] in left:
            first_names_left += "{0} > {1} \n".format("[id{0}|{1}]".format(str(user_vk["id"]), user_vk["first_name"]),
                                                      ' '.join(left[user_vk["id"]]))
        if user_vk["id"] in not_found:
            first_names_not_found += "[id{0}|{1}] \n".format(str(user_vk["id"]), user_vk["first_name"])

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    if first_names_left:
        response += '–û—Ç–∫–ª—é—á–∏–ª–∞: \n'
        response += first_names_left

    if first_names_not_found:
        response += '–î–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \n'
        response += first_names_not_found

    if not first_names_not_found and not first_names_left:
        response += '–ù–∏–∫–æ–≥–æ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∞'

    send(peer, response)


def exec_rename(cmd, chat, peer, sender, args):
    """
    !–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
    """
    name_old = args[0]
    name_new = args[1]
    rank_sender = groupsmgr.get_rank_user(chat, sender)
    if rank_sender == RANK_HOLOP:
        send(peer, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return

    if name_new in FORBIDDEN_NAMES or len(name_new) < 2 or len(name_new) > 30 or not re.match(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_]',
                                                                                              name_new):
        send(peer, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º: " + name_new)
        return

    existing = groupsmgr.get_all_groups(chat)

    if name_old not in existing:
        send(peer, "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + name_old)
        return
    if name_new in existing:
        send(peer, "–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + name_new)
        return

    groupsmgr.rename_group(chat, name_old, name_new)

    if peer > 2E9:
        name_data = vk.users.get(user_id=sender)[0]
        sender_name = name_data['first_name'] + ' ' + name_data['last_name']
        response = sender_name + '\n'
    else:
        response = ''

    response += '–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ' + name_new
    send(peer, response)


def exec_change_rank(cmd, chat, peer, sender, args):
    """
    –ö–æ–º–∞–Ω–¥–∞, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
    TODO –ê–Ω—Ç–æ—à–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–µ—Ç, —É –Ω–µ–≥–æ –≤ –≥–æ–ª–æ–≤–µ –Ω–æ—Ä–º –∏–¥–µ—è
    """
    pass


def exec_week(cmd, chat, peer, sender):
    """
    !–Ω–µ–¥–µ–ª—è
    """
    send(peer, str("–°–µ–π—á–∞—Å " + timetable.get_week() + " –Ω–µ–¥–µ–ª—è").upper())


def exec_roulette(cmd, chat, peer, sender):
    response = "–ò–≥—Ä–∞–µ–º –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É. –ò –ø—Ä–æ–∏–≥—Ä–∞–ª —É –Ω–∞—Å: "
    users = groupsmgr.get_all_users(chat)
    random_user = users[vk_api.utils.get_random_id() % len(users)]
    user_photo = vk.users.get(user_id=random_user, fields=["photo_id"])[0]["photo_id"]
    send(peer, response, "photo" + user_photo)


def exec_use_attachments(label, chat, peer):
    """
    ? - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è + —Ç–µ–∫—Å—Ç
    """
    attachment = groupsmgr.get_attachment(chat, label)
    if attachment:
        send(peer, attachment["message"], attachment["attachments"])
        pass

