from typing import List

import timetable
from vkcommands import VKCommand


class ClassesToday(VKCommand):
    def __init__(self, kristy):
        VKCommand.__init__(self, kristy,
                           label='–ø–∞—Ä—ã',
                           usage='!–ø–∞—Ä—ã [–≥—Ä—É–ø–ø–∞1] [–≥—Ä—É–ø–ø–∞2] [...] [–≥—Ä—É–ø–ø–∞N]',
                           desc='–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ø–∞—Ä–∞—Ö. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å ' +
                                '–æ—Ç —Ç–æ–≥–æ, –≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')

    def execute(self, chat, peer, sender, args=None, attachments=None, fwd_messages=None):
        target_groups = args if args else self.kristy.db.get_user_groups(chat, sender)
        ClassesToday.respond(self.kristy, chat, peer, sender, target_groups)

    @staticmethod
    def respond(kristy, chat: int, peer: int, sender: int, target_groups: List[str]):
        today_weekday = timetable.weekday_ru(kristy.tt_data, chat)
        classes_today = timetable.get_all_classes(kristy.tt_data, chat, today_weekday, target_groups)
        name_data = kristy.vk.users.get(user_id=sender)[0]
        response = '%s' % (name_data['first_name'])

        if len(classes_today) == 0:
            kristy.send(peer, 'üõå %s, —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç. –ë–∞–∏–Ω—å–∫–∏.' % response)
        else:
            result = 'üìö %s, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n' % response

            for class_data in classes_today:
                result += ' ‚Ä¢ %s‚Äî%s ‚Äî %s (%s)\n\n' % (class_data.start_tstr,
                                                      class_data.end_tstr,
                                                      class_data.name,
                                                      class_data.host)

            result += '\nüí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø'

            if len(target_groups) == 1:
                result += '—ã'

            result += ' \"%s\"' % target_groups[0]

            for i in range(1, len(target_groups)):
                result += ', \"%s\"' % target_groups[i]

            result += '.'

            kristy.send(peer, result)
