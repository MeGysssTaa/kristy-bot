import timetable
from vkcommands import VKCommand


class NextClass(VKCommand):
    def __init__(self, kristy):
        VKCommand.__init__(self, kristy,
                           label='–ø–∞—Ä–∞',
                           desc='–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å ' +
                                '–æ—Ç —Ç–æ–≥–æ, –≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')

    def execute(self, chat, peer, sender, args=None, attachments=None, fwd_messages=None):
        sender_groups = self.kristy.db.get_user_groups(chat, sender)
        next_class = timetable.next_class(self.kristy.tt_data, chat, sender_groups)
        name_data = self.kristy.vk.users.get(user_id=sender)[0]
        response = '%s' % (name_data['first_name'])

        if next_class is None:
            self.kristy.send(peer, 'üõå %s, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë. –ë–∞–∏–Ω—å–∫–∏.' % response)
        else:
            time_left = timetable.time_left(self.kristy.tt_data, chat, next_class.start_tstr)
            time_left_str = '–î–æ –Ω–∞—á–∞–ª–∞ ' + time_left + '.' if time_left is not None else '–ó–∞–Ω—è—Ç–∏–µ –≤–æ—Ç-–≤–æ—Ç –Ω–∞—á–Ω—ë—Ç—Å—è!'
            self.kristy.send(peer, 'üìö %s, —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: %s. %s' % (response, next_class, time_left_str))
