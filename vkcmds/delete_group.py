import ranks
import vkcommands
from vkcommands import VKCommand


class DeleteGroup(VKCommand):
    def __init__(self, kristy):
        VKCommand.__init__(self, kristy,
                           label='—É–¥–∞–ª–∏—Ç—å',
                           desc='–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É.',
                           usage='!—É–¥–∞–ª–∏—Ç—å <–≥—Ä—É–ø–ø–∞1> [–≥—Ä—É–ø–ø–∞2] [...] [–≥—Ä—É–ø–ø–∞N]',
                           min_args=1)

    def execute(self, chat, peer, sender, args=None, attachments=None):
        deleted = []
        not_found = []
        not_creator = []

        rank_user = self.kristy.db.get_user_rank(chat, sender)
        existing = self.kristy.db.get_all_groups(chat)
        sender_created_groups = self.kristy.db.get_user_created_groups(chat, sender)

        for group in args:
            if group in existing:
                if group in sender_created_groups or ranks.Rank[rank_user].value >= ranks.Rank.MODERATOR.value:
                    deleted.append(group)
                    self.kristy.db.delete_group(chat, group)
                else:
                    not_creator.append(group)
            else:
                not_found.append(group)

        if peer > 2E9:
            name_data = self.kristy.vk.users.get(user_id=sender)[0]
            sender_name = name_data['first_name'] + ' ' + name_data['last_name']
            response = sender_name + '\n'
        else:
            response = ''

        if deleted:
            response += '–Ø —É–¥–∞–ª–∏–ª–∞ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \n‚úñ '
            response += ' \n‚úñ '.join(deleted)
            response += ' \n'

        if not_found:
            response += '–≠—Ç–∏—Ö –≥—Ä—É–ø–ø –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ: \n‚õî '
            response += ' \n‚õî '.join(not_found)
            response += ' \n'

        if not_creator:
            response += '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –≥—Ä—É–ø–ø—ã: \nüö´ '
            response += ' \nüö´ '.join(not_creator)
            response += ' \n'

        self.kristy.send(peer, response)
